const _astro_dataLayerContent = [["Map",1,2,9,10,131,132],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.0","content-config-digest","bfb150af68556158","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://portfolio.example.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"assets\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"prefetch\":{\"prefetchAll\":true,\"defaultStrategy\":\"viewport\"},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"prism\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"dark-plus\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,55,56,97,98],"e-commerce-api",{id:11,data:13,body:27,filePath:28,digest:29,rendered:30,legacyId:54},{title:14,description:15,technologies:16,featured:22,githubUrl:23,images:24,publishDate:26},"E-commerce REST API","A scalable e-commerce backend API with payment processing and inventory management",[17,18,19,20,21],"Python","FastAPI","PostgreSQL","Redis","Docker",true,"https://github.com/username/ecommerce-api",[25],"/images/projects/api-docs.png",["Date","2023-11-20T00:00:00.000Z"],"# E-commerce REST API\n\nA robust backend API for e-commerce applications, featuring comprehensive product management, order processing, and payment integration.\n\n## Core Features\n\n- **Product Management**: CRUD operations for products, categories, and inventory\n- **Order Processing**: Complete order lifecycle management\n- **Payment Integration**: Stripe and PayPal payment processing\n- **User Management**: Authentication, authorization, and user profiles\n- **Admin Dashboard**: Administrative endpoints for business management\n\n## Architecture\n\n- **FastAPI Framework**: High-performance async API with automatic documentation\n- **PostgreSQL**: Relational database for transactional data integrity\n- **Redis**: Caching layer for improved performance\n- **Docker**: Containerized deployment for scalability\n- **JWT Authentication**: Secure token-based authentication\n\n## Performance & Scalability\n\n- **Async Operations**: Non-blocking I/O for high concurrency\n- **Database Optimization**: Indexed queries and connection pooling\n- **Caching Strategy**: Redis caching for frequently accessed data\n- **Rate Limiting**: API rate limiting to prevent abuse\n- **Monitoring**: Comprehensive logging and error tracking\n\nThis project demonstrates expertise in backend development, database design, and API architecture.","src/content/projects/e-commerce-api.md","6dade21e24b1d96b",{html:31,metadata:32},"<h1 id=\"e-commerce-rest-api\">E-commerce REST API</h1>\n<p>A robust backend API for e-commerce applications, featuring comprehensive product management, order processing, and payment integration.</p>\n<h2 id=\"core-features\">Core Features</h2>\n<ul>\n<li><strong>Product Management</strong>: CRUD operations for products, categories, and inventory</li>\n<li><strong>Order Processing</strong>: Complete order lifecycle management</li>\n<li><strong>Payment Integration</strong>: Stripe and PayPal payment processing</li>\n<li><strong>User Management</strong>: Authentication, authorization, and user profiles</li>\n<li><strong>Admin Dashboard</strong>: Administrative endpoints for business management</li>\n</ul>\n<h2 id=\"architecture\">Architecture</h2>\n<ul>\n<li><strong>FastAPI Framework</strong>: High-performance async API with automatic documentation</li>\n<li><strong>PostgreSQL</strong>: Relational database for transactional data integrity</li>\n<li><strong>Redis</strong>: Caching layer for improved performance</li>\n<li><strong>Docker</strong>: Containerized deployment for scalability</li>\n<li><strong>JWT Authentication</strong>: Secure token-based authentication</li>\n</ul>\n<h2 id=\"performance--scalability\">Performance &#x26; Scalability</h2>\n<ul>\n<li><strong>Async Operations</strong>: Non-blocking I/O for high concurrency</li>\n<li><strong>Database Optimization</strong>: Indexed queries and connection pooling</li>\n<li><strong>Caching Strategy</strong>: Redis caching for frequently accessed data</li>\n<li><strong>Rate Limiting</strong>: API rate limiting to prevent abuse</li>\n<li><strong>Monitoring</strong>: Comprehensive logging and error tracking</li>\n</ul>\n<p>This project demonstrates expertise in backend development, database design, and API architecture.</p>",{headings:33,localImagePaths:47,remoteImagePaths:48,frontmatter:49,imagePaths:53},[34,37,41,44],{depth:35,slug:36,text:14},1,"e-commerce-rest-api",{depth:38,slug:39,text:40},2,"core-features","Core Features",{depth:38,slug:42,text:43},"architecture","Architecture",{depth:38,slug:45,text:46},"performance--scalability","Performance & Scalability",[],[],{title:14,description:15,technologies:50,featured:22,githubUrl:23,images:51,publishDate:52},[17,18,19,20,21],[25],["Date","2023-11-20T00:00:00.000Z"],[],"e-commerce-api.md","task-manager-app",{id:55,data:57,body:72,filePath:73,digest:74,rendered:75,legacyId:96},{title:58,description:59,technologies:60,featured:22,liveUrl:66,githubUrl:67,images:68,publishDate:71},"Task Manager App","A full-stack task management application built with React and Node.js",[61,62,63,64,65],"React","Node.js","Express","MongoDB","TypeScript","https://taskmanager-demo.com","https://github.com/username/task-manager",[69,70],"/images/projects/task-manager-1.png","/images/projects/task-manager-2.png",["Date","2024-01-15T00:00:00.000Z"],"# Task Manager App\n\nA comprehensive task management application that helps users organize their daily tasks and projects. Built with modern web technologies for optimal performance and user experience.\n\n## Features\n\n- **Task Creation & Management**: Create, edit, and delete tasks with due dates and priorities\n- **Project Organization**: Group tasks into projects for better organization\n- **Real-time Updates**: Live synchronization across multiple devices\n- **User Authentication**: Secure login and user management\n- **Responsive Design**: Works seamlessly on desktop and mobile devices\n\n## Technical Implementation\n\nThe application follows a modern full-stack architecture:\n\n- **Frontend**: React with TypeScript for type safety and better developer experience\n- **Backend**: Node.js with Express for RESTful API endpoints\n- **Database**: MongoDB for flexible document storage\n- **Authentication**: JWT-based authentication system\n- **Deployment**: Containerized with Docker for consistent deployment\n\n## Key Challenges Solved\n\n1. **Real-time Synchronization**: Implemented WebSocket connections for instant updates\n2. **Performance Optimization**: Used React.memo and useMemo for efficient re-renders\n3. **Data Validation**: Comprehensive input validation on both client and server\n4. **Error Handling**: Graceful error handling with user-friendly messages\n\nThis project demonstrates proficiency in full-stack development, modern JavaScript frameworks, and database design.","src/content/projects/task-manager-app.md","50e74bf03bff1fc7",{html:76,metadata:77},"<h1 id=\"task-manager-app\">Task Manager App</h1>\n<p>A comprehensive task management application that helps users organize their daily tasks and projects. Built with modern web technologies for optimal performance and user experience.</p>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li><strong>Task Creation &#x26; Management</strong>: Create, edit, and delete tasks with due dates and priorities</li>\n<li><strong>Project Organization</strong>: Group tasks into projects for better organization</li>\n<li><strong>Real-time Updates</strong>: Live synchronization across multiple devices</li>\n<li><strong>User Authentication</strong>: Secure login and user management</li>\n<li><strong>Responsive Design</strong>: Works seamlessly on desktop and mobile devices</li>\n</ul>\n<h2 id=\"technical-implementation\">Technical Implementation</h2>\n<p>The application follows a modern full-stack architecture:</p>\n<ul>\n<li><strong>Frontend</strong>: React with TypeScript for type safety and better developer experience</li>\n<li><strong>Backend</strong>: Node.js with Express for RESTful API endpoints</li>\n<li><strong>Database</strong>: MongoDB for flexible document storage</li>\n<li><strong>Authentication</strong>: JWT-based authentication system</li>\n<li><strong>Deployment</strong>: Containerized with Docker for consistent deployment</li>\n</ul>\n<h2 id=\"key-challenges-solved\">Key Challenges Solved</h2>\n<ol>\n<li><strong>Real-time Synchronization</strong>: Implemented WebSocket connections for instant updates</li>\n<li><strong>Performance Optimization</strong>: Used React.memo and useMemo for efficient re-renders</li>\n<li><strong>Data Validation</strong>: Comprehensive input validation on both client and server</li>\n<li><strong>Error Handling</strong>: Graceful error handling with user-friendly messages</li>\n</ol>\n<p>This project demonstrates proficiency in full-stack development, modern JavaScript frameworks, and database design.</p>",{headings:78,localImagePaths:89,remoteImagePaths:90,frontmatter:91,imagePaths:95},[79,80,83,86],{depth:35,slug:55,text:58},{depth:38,slug:81,text:82},"features","Features",{depth:38,slug:84,text:85},"technical-implementation","Technical Implementation",{depth:38,slug:87,text:88},"key-challenges-solved","Key Challenges Solved",[],[],{title:58,description:59,technologies:92,featured:22,liveUrl:66,githubUrl:67,images:93,publishDate:94},[61,62,63,64,65],[69,70],["Date","2024-01-15T00:00:00.000Z"],[],"task-manager-app.md","portfolio-website",{id:97,data:99,body:111,filePath:112,digest:113,rendered:114,legacyId:130},{title:100,description:101,technologies:102,featured:22,liveUrl:106,githubUrl:107,images:108,publishDate:110},"Portfolio Website","A modern portfolio website built with Astro and TypeScript",[103,65,104,105],"Astro","CSS","Markdown","https://myportfolio.dev","https://github.com/username/portfolio",[109],"/images/projects/portfolio-1.png",["Date","2024-02-01T00:00:00.000Z"],"# Portfolio Website\n\nA personal portfolio website showcasing projects and blog posts, built with Astro for optimal performance and SEO.\n\n## Features\n\n- **Static Site Generation**: Lightning-fast loading with pre-rendered pages\n- **Content Collections**: Organized project and blog content management\n- **Dark Theme**: Minimalistic dark design for better readability\n- **Responsive Design**: Mobile-first approach for all screen sizes\n- **SEO Optimized**: Comprehensive meta tags and structured data\n\n## Technical Highlights\n\n- **Astro Framework**: Leverages Astro's island architecture for optimal performance\n- **TypeScript**: Full type safety throughout the codebase\n- **Content Management**: Markdown-based content with frontmatter validation\n- **Image Optimization**: Automatic image optimization and lazy loading\n- **Accessibility**: WCAG compliant with proper semantic HTML\n\nThis project showcases modern web development practices and static site generation techniques.","src/content/projects/portfolio-website.md","c5e9688e47791f0a",{html:115,metadata:116},"<h1 id=\"portfolio-website\">Portfolio Website</h1>\n<p>A personal portfolio website showcasing projects and blog posts, built with Astro for optimal performance and SEO.</p>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li><strong>Static Site Generation</strong>: Lightning-fast loading with pre-rendered pages</li>\n<li><strong>Content Collections</strong>: Organized project and blog content management</li>\n<li><strong>Dark Theme</strong>: Minimalistic dark design for better readability</li>\n<li><strong>Responsive Design</strong>: Mobile-first approach for all screen sizes</li>\n<li><strong>SEO Optimized</strong>: Comprehensive meta tags and structured data</li>\n</ul>\n<h2 id=\"technical-highlights\">Technical Highlights</h2>\n<ul>\n<li><strong>Astro Framework</strong>: Leverages Astro’s island architecture for optimal performance</li>\n<li><strong>TypeScript</strong>: Full type safety throughout the codebase</li>\n<li><strong>Content Management</strong>: Markdown-based content with frontmatter validation</li>\n<li><strong>Image Optimization</strong>: Automatic image optimization and lazy loading</li>\n<li><strong>Accessibility</strong>: WCAG compliant with proper semantic HTML</li>\n</ul>\n<p>This project showcases modern web development practices and static site generation techniques.</p>",{headings:117,localImagePaths:123,remoteImagePaths:124,frontmatter:125,imagePaths:129},[118,119,120],{depth:35,slug:97,text:100},{depth:38,slug:81,text:82},{depth:38,slug:121,text:122},"technical-highlights","Technical Highlights",[],[],{title:100,description:101,technologies:126,featured:22,liveUrl:106,githubUrl:107,images:127,publishDate:128},[103,65,104,105],[109],["Date","2024-02-01T00:00:00.000Z"],[],"portfolio-website.md","blog",["Map",133,134,179,180],"getting-started-with-astro",{id:133,data:135,body:144,filePath:145,digest:146,rendered:147,legacyId:178},{title:136,description:137,publishDate:138,tags:139,featured:22,draft:143},"Getting Started with Astro: A Modern Static Site Generator","Learn how to build fast, content-focused websites with Astro's unique island architecture",["Date","2024-01-10T00:00:00.000Z"],[103,140,141,142],"Web Development","Static Sites","Performance",false,"# Getting Started with Astro: A Modern Static Site Generator\n\nAstro has been gaining significant traction in the web development community, and for good reason. It offers a unique approach to building websites that prioritizes performance and developer experience.\n\n## What Makes Astro Different?\n\nAstro's key innovation is its **island architecture**. Unlike traditional frameworks that hydrate the entire page, Astro only hydrates the interactive components that need JavaScript, leaving the rest as static HTML.\n\n### Key Benefits\n\n1. **Zero JavaScript by Default**: Astro ships zero JavaScript to the browser unless you explicitly need it\n2. **Framework Agnostic**: Use React, Vue, Svelte, or any other framework within the same project\n3. **Content Collections**: Built-in content management for blogs and documentation\n4. **Excellent Performance**: Lighthouse scores of 100 are common with Astro sites\n\n## Building Your First Astro Site\n\nLet's walk through creating a simple Astro project:\n\n```bash\n# Create a new Astro project\nnpm create astro@latest my-astro-site\n\n# Navigate to the project\ncd my-astro-site\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n```\n\n## Content Collections\n\nOne of Astro's standout features is content collections. They provide type-safe content management:\n\n```typescript\n// src/content/config.ts\nimport { defineCollection, z } from 'astro:content';\n\nconst blogCollection = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    publishDate: z.date(),\n    tags: z.array(z.string()).optional(),\n  }),\n});\n\nexport const collections = {\n  'blog': blogCollection,\n};\n```\n\n## Performance Out of the Box\n\nAstro's performance benefits come from several optimizations:\n\n- **Static HTML Generation**: Most content is pre-rendered at build time\n- **Selective Hydration**: Only interactive components load JavaScript\n- **Automatic Code Splitting**: JavaScript is automatically split by component\n- **Image Optimization**: Built-in image optimization and lazy loading\n\n## Conclusion\n\nAstro represents a paradigm shift in how we think about web development. By defaulting to static HTML and selectively adding interactivity, it delivers exceptional performance while maintaining developer productivity.\n\nWhether you're building a blog, documentation site, or marketing pages, Astro is worth considering for your next project.","src/content/blog/getting-started-with-astro.md","f2a3cfeac51ccf2d",{html:148,metadata:149},"<h1 id=\"getting-started-with-astro-a-modern-static-site-generator\">Getting Started with Astro: A Modern Static Site Generator</h1>\n<p>Astro has been gaining significant traction in the web development community, and for good reason. It offers a unique approach to building websites that prioritizes performance and developer experience.</p>\n<h2 id=\"what-makes-astro-different\">What Makes Astro Different?</h2>\n<p>Astro’s key innovation is its <strong>island architecture</strong>. Unlike traditional frameworks that hydrate the entire page, Astro only hydrates the interactive components that need JavaScript, leaving the rest as static HTML.</p>\n<h3 id=\"key-benefits\">Key Benefits</h3>\n<ol>\n<li><strong>Zero JavaScript by Default</strong>: Astro ships zero JavaScript to the browser unless you explicitly need it</li>\n<li><strong>Framework Agnostic</strong>: Use React, Vue, Svelte, or any other framework within the same project</li>\n<li><strong>Content Collections</strong>: Built-in content management for blogs and documentation</li>\n<li><strong>Excellent Performance</strong>: Lighthouse scores of 100 are common with Astro sites</li>\n</ol>\n<h2 id=\"building-your-first-astro-site\">Building Your First Astro Site</h2>\n<p>Let’s walk through creating a simple Astro project:</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code is:raw=\"\" class=\"language-bash\"><span class=\"token comment\"># Create a new Astro project</span>\n<span class=\"token function\">npm</span> create astro@latest my-astro-site\n\n<span class=\"token comment\"># Navigate to the project</span>\n<span class=\"token builtin class-name\">cd</span> my-astro-site\n\n<span class=\"token comment\"># Install dependencies</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n\n<span class=\"token comment\"># Start the development server</span>\n<span class=\"token function\">npm</span> run dev\n</code></pre>\n<h2 id=\"content-collections\">Content Collections</h2>\n<p>One of Astro’s standout features is content collections. They provide type-safe content management:</p>\n<pre class=\"language-typescript\" data-language=\"typescript\"><code is:raw=\"\" class=\"language-typescript\"><span class=\"token comment\">// src/content/config.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineCollection<span class=\"token punctuation\">,</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'astro:content'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> blogCollection <span class=\"token operator\">=</span> <span class=\"token function\">defineCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span>\n  schema<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    publishDate<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    tags<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> collections <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'blog'</span><span class=\"token operator\">:</span> blogCollection<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"performance-out-of-the-box\">Performance Out of the Box</h2>\n<p>Astro’s performance benefits come from several optimizations:</p>\n<ul>\n<li><strong>Static HTML Generation</strong>: Most content is pre-rendered at build time</li>\n<li><strong>Selective Hydration</strong>: Only interactive components load JavaScript</li>\n<li><strong>Automatic Code Splitting</strong>: JavaScript is automatically split by component</li>\n<li><strong>Image Optimization</strong>: Built-in image optimization and lazy loading</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Astro represents a paradigm shift in how we think about web development. By defaulting to static HTML and selectively adding interactivity, it delivers exceptional performance while maintaining developer productivity.</p>\n<p>Whether you’re building a blog, documentation site, or marketing pages, Astro is worth considering for your next project.</p>",{headings:150,localImagePaths:172,remoteImagePaths:173,frontmatter:174,imagePaths:177},[151,153,156,160,163,166,169],{depth:35,slug:152,text:136},"getting-started-with-astro-a-modern-static-site-generator",{depth:38,slug:154,text:155},"what-makes-astro-different","What Makes Astro Different?",{depth:157,slug:158,text:159},3,"key-benefits","Key Benefits",{depth:38,slug:161,text:162},"building-your-first-astro-site","Building Your First Astro Site",{depth:38,slug:164,text:165},"content-collections","Content Collections",{depth:38,slug:167,text:168},"performance-out-of-the-box","Performance Out of the Box",{depth:38,slug:170,text:171},"conclusion","Conclusion",[],[],{title:136,description:137,publishDate:175,tags:176,featured:22,draft:143},["Date","2024-01-10T00:00:00.000Z"],[103,140,141,142],[],"getting-started-with-astro.md","typescript-best-practices",{id:179,data:181,body:189,filePath:190,digest:191,rendered:192,legacyId:223},{title:182,description:183,publishDate:184,tags:185,featured:143,draft:143},"TypeScript Best Practices for Modern Web Development","Essential TypeScript patterns and practices for building maintainable applications",["Date","2024-01-25T00:00:00.000Z"],[65,186,187,188],"JavaScript","Best Practices","Code Quality","# TypeScript Best Practices for Modern Web Development\n\nTypeScript has become the de facto standard for large-scale JavaScript applications. Here are some essential best practices to help you write better TypeScript code.\n\n## 1. Use Strict Mode\n\nAlways enable strict mode in your `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true\n  }\n}\n```\n\n## 2. Prefer Type Inference\n\nLet TypeScript infer types when possible:\n\n```typescript\n// Good - type is inferred\nconst users = ['Alice', 'Bob', 'Charlie'];\n\n// Unnecessary - type annotation is redundant\nconst users: string[] = ['Alice', 'Bob', 'Charlie'];\n```\n\n## 3. Use Union Types Effectively\n\nUnion types are powerful for modeling data that can be one of several types:\n\n```typescript\ntype Status = 'loading' | 'success' | 'error';\n\ninterface ApiResponse {\n  status: Status;\n  data?: any;\n  error?: string;\n}\n```\n\n## 4. Leverage Utility Types\n\nTypeScript provides many built-in utility types:\n\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  isActive: boolean;\n}\n\n// Create a type with only some properties\ntype UserPreview = Pick<User, 'id' | 'name'>;\n\n// Make all properties optional\ntype PartialUser = Partial<User>;\n\n// Make all properties required\ntype RequiredUser = Required<User>;\n```\n\n## 5. Use Discriminated Unions\n\nFor complex state management, discriminated unions are invaluable:\n\n```typescript\ntype LoadingState = {\n  status: 'loading';\n};\n\ntype SuccessState = {\n  status: 'success';\n  data: any;\n};\n\ntype ErrorState = {\n  status: 'error';\n  error: string;\n};\n\ntype AppState = LoadingState | SuccessState | ErrorState;\n\nfunction handleState(state: AppState) {\n  switch (state.status) {\n    case 'loading':\n      // TypeScript knows this is LoadingState\n      break;\n    case 'success':\n      // TypeScript knows this is SuccessState\n      console.log(state.data);\n      break;\n    case 'error':\n      // TypeScript knows this is ErrorState\n      console.error(state.error);\n      break;\n  }\n}\n```\n\n## 6. Generic Constraints\n\nUse generic constraints to make your functions more flexible yet type-safe:\n\n```typescript\ninterface Identifiable {\n  id: number;\n}\n\nfunction updateEntity<T extends Identifiable>(\n  entity: T,\n  updates: Partial<T>\n): T {\n  return { ...entity, ...updates };\n}\n```\n\n## Conclusion\n\nThese practices will help you write more maintainable and type-safe TypeScript code. Remember, the goal is to leverage TypeScript's type system to catch errors at compile time and improve developer experience.","src/content/blog/typescript-best-practices.md","ed944c6dcf11cca7",{html:193,metadata:194},"<h1 id=\"typescript-best-practices-for-modern-web-development\">TypeScript Best Practices for Modern Web Development</h1>\n<p>TypeScript has become the de facto standard for large-scale JavaScript applications. Here are some essential best practices to help you write better TypeScript code.</p>\n<h2 id=\"1-use-strict-mode\">1. Use Strict Mode</h2>\n<p>Always enable strict mode in your <code>tsconfig.json</code>:</p>\n<pre class=\"language-json\" data-language=\"json\"><code is:raw=\"\" class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictFunctionTypes\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"2-prefer-type-inference\">2. Prefer Type Inference</h2>\n<p>Let TypeScript infer types when possible:</p>\n<pre class=\"language-typescript\" data-language=\"typescript\"><code is:raw=\"\" class=\"language-typescript\"><span class=\"token comment\">// Good - type is inferred</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Unnecessary - type annotation is redundant</span>\n<span class=\"token keyword\">const</span> users<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"3-use-union-types-effectively\">3. Use Union Types Effectively</h2>\n<p>Union types are powerful for modeling data that can be one of several types:</p>\n<pre class=\"language-typescript\" data-language=\"typescript\"><code is:raw=\"\" class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Status</span> <span class=\"token operator\">=</span> <span class=\"token string\">'loading'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'success'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ApiResponse</span> <span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> Status<span class=\"token punctuation\">;</span>\n  data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"4-leverage-utility-types\">4. Leverage Utility Types</h2>\n<p>TypeScript provides many built-in utility types:</p>\n<pre class=\"language-typescript\" data-language=\"typescript\"><code is:raw=\"\" class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  isActive<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Create a type with only some properties</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserPreview</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&#x3C;</span>User<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'name'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Make all properties optional</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialUser</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&#x3C;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Make all properties required</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RequiredUser</span> <span class=\"token operator\">=</span> Required<span class=\"token operator\">&#x3C;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"5-use-discriminated-unions\">5. Use Discriminated Unions</h2>\n<p>For complex state management, discriminated unions are invaluable:</p>\n<pre class=\"language-typescript\" data-language=\"typescript\"><code is:raw=\"\" class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">LoadingState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> <span class=\"token string\">'loading'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SuccessState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ErrorState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AppState</span> <span class=\"token operator\">=</span> LoadingState <span class=\"token operator\">|</span> SuccessState <span class=\"token operator\">|</span> ErrorState<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleState</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> AppState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'loading'</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// TypeScript knows this is LoadingState</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'success'</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// TypeScript knows this is SuccessState</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'error'</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// TypeScript knows this is ErrorState</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"6-generic-constraints\">6. Generic Constraints</h2>\n<p>Use generic constraints to make your functions more flexible yet type-safe:</p>\n<pre class=\"language-typescript\" data-language=\"typescript\"><code is:raw=\"\" class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Identifiable</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">updateEntity</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Identifiable<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  entity<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  updates<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>entity<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>updates <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>These practices will help you write more maintainable and type-safe TypeScript code. Remember, the goal is to leverage TypeScript’s type system to catch errors at compile time and improve developer experience.</p>",{headings:195,localImagePaths:217,remoteImagePaths:218,frontmatter:219,imagePaths:222},[196,198,201,204,207,210,213,216],{depth:35,slug:197,text:182},"typescript-best-practices-for-modern-web-development",{depth:38,slug:199,text:200},"1-use-strict-mode","1. Use Strict Mode",{depth:38,slug:202,text:203},"2-prefer-type-inference","2. Prefer Type Inference",{depth:38,slug:205,text:206},"3-use-union-types-effectively","3. Use Union Types Effectively",{depth:38,slug:208,text:209},"4-leverage-utility-types","4. Leverage Utility Types",{depth:38,slug:211,text:212},"5-use-discriminated-unions","5. Use Discriminated Unions",{depth:38,slug:214,text:215},"6-generic-constraints","6. Generic Constraints",{depth:38,slug:170,text:171},[],[],{title:182,description:183,publishDate:220,tags:221,featured:143,draft:143},["Date","2024-01-25T00:00:00.000Z"],[65,186,187,188],[],"typescript-best-practices.md"];

export { _astro_dataLayerContent as default };
