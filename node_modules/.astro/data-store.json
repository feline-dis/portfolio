[["Map",1,2,9,10,105,106],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.0","content-config-digest","bfb150af68556158","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://portfolio.example.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"assets\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":4321,\"streaming\":true,\"allowedHosts\":[\".ngrok-free.app\"]},\"redirects\":{},\"prefetch\":{\"prefetchAll\":true,\"defaultStrategy\":\"viewport\"},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,70,71],"go-radio-v2",{"id":11,"data":13,"body":30,"filePath":31,"digest":32,"rendered":33,"legacyId":69},{"title":14,"description":15,"technologies":16,"featured":24,"liveUrl":25,"githubUrl":26,"images":27,"publishDate":29},"Go Radio v2","A modern web radio streaming app with real-time playback and YouTube integration",[17,18,19,20,21,22,23],"Go","React","TypeScript","WebSocket","PostgreSQL","AWS S3","Docker",true,"https://go-radio-v2.fly.dev","https://github.com/feline-dis/go-radio-v2",[28],"/images/projects/go-radio-v2-1.png",["Date","2024-01-20T00:00:00.000Z"],"# Go Radio v2\n\nMy personal web radio streaming application that I built after being inspired by the folks at [radio.uwu.network](https://radio.uwu.network). It's basically a Spotify jam session but smaller (and cooler).\n\n## What It Does\n\n- **YouTube DLP Integration**: Drop in YouTube URLs and the app handles the rest (downloading, converting, storing)\n- **Live Sync**: Everyone listening gets the same track at the same time - sing along with your friends\n- **Cloud Storage**: Uses AWS S3 because I didn't want to deal with local file management\n- **Persistent Playlists**: PostgreSQL keeps track of everything so your music doesn't disappear\n\n## The Tech Stack\n\nI went with Go for the backend because it's fast and doesn't make me want to throw my computer out the window. The frontend is React with TypeScript because I like my code to yell at me when I mess up.\n\n### Backend\n- **Go 1.21+**: Main language - fast, simple, gets stuff done\n- **Gorilla WebSocket**: For real-time communication without the headaches\n- **PostgreSQL**: Because I needed actual data relationships\n- **AWS SDK**: S3 integration for audio storage\n- **JWT**: Authentication that doesn't suck\n\n### Frontend\n- **React 18**: For the UI that people actually interact with\n- **TypeScript**: Catches my mistakes before they become production bugs\n- **Vite**: Build tool that's actually fast\n- **Tailwind CSS**: Makes things look decent without writing tons of CSS\n\n### Infrastructure\n- **Docker**: Containerized everything because deployment consistency matters\n- **Fly.io**: Cloud hosting that just works\n- **GitHub Actions**: CI/CD that deploys when I push to main\n\n## Cool Stuff I Figured Out\n\n1. **YouTube Audio Extraction**: Built a system that downloads YouTube videos, extracts audio, and stores it in S3. It's surprisingly complicated to do this reliably. Downloading is currently done locally through a separate binary to bypass Googles IP blocks. Could use a residential proxy but that was too much effort/ cost for a side project.\n\n2. **Real-time Sync**: WebSocket implementation that keeps all connected clients in sync. If someone skips a track, everyone skips.\n\n3. **Database Migrations**: Proper PostgreSQL migrations done with Atlas.\n\n4. **Modular Architecture**: Backend and frontend are completely separate, which makes development way easier.\n\nThis project taught me a lot about real-time systems, audio processing, and browser audio APIs. It's the kind of project that started simple and ended up being way more complex than I expected, but that's half the fun.\n\n## Known Issues / Future Plans\n\nOne major feature on the horizon is **self-hosting**. I want Go Radio to work as a standalone program people can run on their own machines — spin up a local server, share the link, and let friends tunnel in to join their personal radio station. There's already a working branch in progress for this under [feat/self-host](https://github.com/feline-dis/go-radio-v2/tree/feat/self-host).\n\nRight now, this setup isn't fully real-time. Each client fetches the audio via an HTTP GET request, which means playback timing can drift slightly depending on individual network conditions. The server does its best to keep everyone aligned by orchestrating playback via WebSocket messages, but some desync is still possible — especially on weaker connections or if someone’s on hotel Wi-Fi.\n\nIn the future, I’m interested in exploring **true real-time audio** streaming solutions like:\n\n- **WebRTC**: Built for peer-to-peer media, could help reduce latency\n- **HLS (HTTP Live Streaming)**: Already battle-tested by big players like Twitch and YouTube\n- **Raw WebSocket Streaming**: Sending audio chunks directly over the socket, though this comes with buffering and codec headaches\n\nI don’t need this to be perfect — it’s a social radio app, not NASA comms — but improving sync and latency is definitely on the roadmap. Stay tuned.","src/content/projects/go-radio-v2.md","4fc3eae4e939b90b",{"html":34,"metadata":35},"\u003Ch1 id=\"go-radio-v2\">Go Radio v2\u003C/h1>\n\u003Cp>My personal web radio streaming application that I built after being inspired by the folks at \u003Ca href=\"https://radio.uwu.network\">radio.uwu.network\u003C/a>. It’s basically a Spotify jam session but smaller (and cooler).\u003C/p>\n\u003Ch2 id=\"what-it-does\">What It Does\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>YouTube DLP Integration\u003C/strong>: Drop in YouTube URLs and the app handles the rest (downloading, converting, storing)\u003C/li>\n\u003Cli>\u003Cstrong>Live Sync\u003C/strong>: Everyone listening gets the same track at the same time - sing along with your friends\u003C/li>\n\u003Cli>\u003Cstrong>Cloud Storage\u003C/strong>: Uses AWS S3 because I didn’t want to deal with local file management\u003C/li>\n\u003Cli>\u003Cstrong>Persistent Playlists\u003C/strong>: PostgreSQL keeps track of everything so your music doesn’t disappear\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"the-tech-stack\">The Tech Stack\u003C/h2>\n\u003Cp>I went with Go for the backend because it’s fast and doesn’t make me want to throw my computer out the window. The frontend is React with TypeScript because I like my code to yell at me when I mess up.\u003C/p>\n\u003Ch3 id=\"backend\">Backend\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Go 1.21+\u003C/strong>: Main language - fast, simple, gets stuff done\u003C/li>\n\u003Cli>\u003Cstrong>Gorilla WebSocket\u003C/strong>: For real-time communication without the headaches\u003C/li>\n\u003Cli>\u003Cstrong>PostgreSQL\u003C/strong>: Because I needed actual data relationships\u003C/li>\n\u003Cli>\u003Cstrong>AWS SDK\u003C/strong>: S3 integration for audio storage\u003C/li>\n\u003Cli>\u003Cstrong>JWT\u003C/strong>: Authentication that doesn’t suck\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"frontend\">Frontend\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>React 18\u003C/strong>: For the UI that people actually interact with\u003C/li>\n\u003Cli>\u003Cstrong>TypeScript\u003C/strong>: Catches my mistakes before they become production bugs\u003C/li>\n\u003Cli>\u003Cstrong>Vite\u003C/strong>: Build tool that’s actually fast\u003C/li>\n\u003Cli>\u003Cstrong>Tailwind CSS\u003C/strong>: Makes things look decent without writing tons of CSS\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"infrastructure\">Infrastructure\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Docker\u003C/strong>: Containerized everything because deployment consistency matters\u003C/li>\n\u003Cli>\u003Cstrong>Fly.io\u003C/strong>: Cloud hosting that just works\u003C/li>\n\u003Cli>\u003Cstrong>GitHub Actions\u003C/strong>: CI/CD that deploys when I push to main\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"cool-stuff-i-figured-out\">Cool Stuff I Figured Out\u003C/h2>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>YouTube Audio Extraction\u003C/strong>: Built a system that downloads YouTube videos, extracts audio, and stores it in S3. It’s surprisingly complicated to do this reliably. Downloading is currently done locally through a separate binary to bypass Googles IP blocks. Could use a residential proxy but that was too much effort/ cost for a side project.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Real-time Sync\u003C/strong>: WebSocket implementation that keeps all connected clients in sync. If someone skips a track, everyone skips.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Database Migrations\u003C/strong>: Proper PostgreSQL migrations done with Atlas.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Modular Architecture\u003C/strong>: Backend and frontend are completely separate, which makes development way easier.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>This project taught me a lot about real-time systems, audio processing, and browser audio APIs. It’s the kind of project that started simple and ended up being way more complex than I expected, but that’s half the fun.\u003C/p>\n\u003Ch2 id=\"known-issues--future-plans\">Known Issues / Future Plans\u003C/h2>\n\u003Cp>One major feature on the horizon is \u003Cstrong>self-hosting\u003C/strong>. I want Go Radio to work as a standalone program people can run on their own machines — spin up a local server, share the link, and let friends tunnel in to join their personal radio station. There’s already a working branch in progress for this under \u003Ca href=\"https://github.com/feline-dis/go-radio-v2/tree/feat/self-host\">feat/self-host\u003C/a>.\u003C/p>\n\u003Cp>Right now, this setup isn’t fully real-time. Each client fetches the audio via an HTTP GET request, which means playback timing can drift slightly depending on individual network conditions. The server does its best to keep everyone aligned by orchestrating playback via WebSocket messages, but some desync is still possible — especially on weaker connections or if someone’s on hotel Wi-Fi.\u003C/p>\n\u003Cp>In the future, I’m interested in exploring \u003Cstrong>true real-time audio\u003C/strong> streaming solutions like:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>WebRTC\u003C/strong>: Built for peer-to-peer media, could help reduce latency\u003C/li>\n\u003Cli>\u003Cstrong>HLS (HTTP Live Streaming)\u003C/strong>: Already battle-tested by big players like Twitch and YouTube\u003C/li>\n\u003Cli>\u003Cstrong>Raw WebSocket Streaming\u003C/strong>: Sending audio chunks directly over the socket, though this comes with buffering and codec headaches\u003C/li>\n\u003C/ul>\n\u003Cp>I don’t need this to be perfect — it’s a social radio app, not NASA comms — but improving sync and latency is definitely on the roadmap. Stay tuned.\u003C/p>",{"headings":36,"localImagePaths":62,"remoteImagePaths":63,"frontmatter":64,"imagePaths":68},[37,39,43,46,50,53,56,59],{"depth":38,"slug":11,"text":14},1,{"depth":40,"slug":41,"text":42},2,"what-it-does","What It Does",{"depth":40,"slug":44,"text":45},"the-tech-stack","The Tech Stack",{"depth":47,"slug":48,"text":49},3,"backend","Backend",{"depth":47,"slug":51,"text":52},"frontend","Frontend",{"depth":47,"slug":54,"text":55},"infrastructure","Infrastructure",{"depth":40,"slug":57,"text":58},"cool-stuff-i-figured-out","Cool Stuff I Figured Out",{"depth":40,"slug":60,"text":61},"known-issues--future-plans","Known Issues / Future Plans",[],[],{"title":14,"description":15,"technologies":65,"featured":24,"liveUrl":25,"githubUrl":26,"images":66,"publishDate":67},[17,18,19,20,21,22,23],[28],["Date","2024-01-20T00:00:00.000Z"],[],"go-radio-v2.md","portfolio-website",{"id":70,"data":72,"body":83,"filePath":84,"digest":85,"rendered":86,"legacyId":104},{"title":73,"description":74,"technologies":75,"featured":24,"liveUrl":79,"githubUrl":80,"images":81,"publishDate":82},"Portfolio Website","A modern portfolio website built with Astro and TypeScript",[76,19,77,78],"Astro","CSS","Markdown","https://jonhansen.dev","https://github.com/feline-dis/portfolio",[],["Date","2024-02-01T00:00:00.000Z"],"# Portfolio Website\n\nA personal portfolio website showcasing projects and blog posts, built with Astro for optimal performance and SEO.\n\n## Features\n\n- **Static Site Generation**: Lightning-fast loading with pre-rendered pages\n- **Content Collections**: Organized project and blog content management\n- **Dark Theme**: Minimalistic dark design for better readability\n- **Responsive Design**: Mobile-first approach for all screen sizes\n- **SEO Optimized**: Comprehensive meta tags and structured data\n\n## Technical Highlights\n\n- **Astro Framework**: Leverages Astro's island architecture for optimal performance\n- **TypeScript**: Full type safety throughout the codebase\n- **Content Management**: Markdown-based content with frontmatter validation\n- **Image Optimization**: Automatic image optimization and lazy loading\n- **Accessibility**: WCAG compliant with proper semantic HTML\n\nThis project showcases modern web development practices and static site generation techniques.","src/content/projects/portfolio-website.md","ea1a695e545e808e",{"html":87,"metadata":88},"\u003Ch1 id=\"portfolio-website\">Portfolio Website\u003C/h1>\n\u003Cp>A personal portfolio website showcasing projects and blog posts, built with Astro for optimal performance and SEO.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Static Site Generation\u003C/strong>: Lightning-fast loading with pre-rendered pages\u003C/li>\n\u003Cli>\u003Cstrong>Content Collections\u003C/strong>: Organized project and blog content management\u003C/li>\n\u003Cli>\u003Cstrong>Dark Theme\u003C/strong>: Minimalistic dark design for better readability\u003C/li>\n\u003Cli>\u003Cstrong>Responsive Design\u003C/strong>: Mobile-first approach for all screen sizes\u003C/li>\n\u003Cli>\u003Cstrong>SEO Optimized\u003C/strong>: Comprehensive meta tags and structured data\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"technical-highlights\">Technical Highlights\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Astro Framework\u003C/strong>: Leverages Astro’s island architecture for optimal performance\u003C/li>\n\u003Cli>\u003Cstrong>TypeScript\u003C/strong>: Full type safety throughout the codebase\u003C/li>\n\u003Cli>\u003Cstrong>Content Management\u003C/strong>: Markdown-based content with frontmatter validation\u003C/li>\n\u003Cli>\u003Cstrong>Image Optimization\u003C/strong>: Automatic image optimization and lazy loading\u003C/li>\n\u003Cli>\u003Cstrong>Accessibility\u003C/strong>: WCAG compliant with proper semantic HTML\u003C/li>\n\u003C/ul>\n\u003Cp>This project showcases modern web development practices and static site generation techniques.\u003C/p>",{"headings":89,"localImagePaths":97,"remoteImagePaths":98,"frontmatter":99,"imagePaths":103},[90,91,94],{"depth":38,"slug":70,"text":73},{"depth":40,"slug":92,"text":93},"features","Features",{"depth":40,"slug":95,"text":96},"technical-highlights","Technical Highlights",[],[],{"title":73,"description":74,"technologies":100,"featured":24,"liveUrl":79,"githubUrl":80,"images":101,"publishDate":102},[76,19,77,78],[],["Date","2024-02-01T00:00:00.000Z"],[],"portfolio-website.md","blog",["Map",107,108,175,176,219,220],"accept-interfaces-return-structs",{"id":107,"data":109,"body":119,"filePath":120,"digest":121,"rendered":122,"legacyId":174},{"title":110,"description":111,"publishDate":112,"tags":113,"featured":24,"draft":118},"Accept Interfaces, Return Structs","Diving deep into one of the most important idioms in Golang.",["Date","2024-01-10T00:00:00.000Z"],[114,115,116,49,117],"Golang","Design Patterns","Best Practices","Code Quality",false,"# Accept Interfaces, Return Structs: A Go Idiom That Will Change How You Think About APIs\n\nOne of the most powerful and elegant idioms in Go is \"accept interfaces, return structs.\" If you're coming from other languages, this might seem counterintuitive at first. After all, many object-oriented languages encourage you to return interfaces to hide implementation details. But Go's approach is different, and once you understand why, it will fundamentally change how you design APIs.\n\n## What Does \"Accept Interfaces, Return Structs\" Mean?\n\nThis idiom suggests that when designing functions and methods:\n- **Parameters should be interfaces** (when possible)\n- **Return values should be concrete types** (usually structs)\n\nLet's see this in action with a practical example.\n\n## The Traditional Approach (What NOT to Do)\n\nIf you're coming from Java or C#, you might be tempted to write something like this:\n\n```go\n// DON'T DO THIS\ntype FileProcessor interface {\n    ProcessFile(filename string) error\n    GetResults() []string\n}\n\ntype CSVProcessor struct {\n    results []string\n}\n\nfunc (c *CSVProcessor) ProcessFile(filename string) error {\n    // Process CSV file\n    c.results = append(c.results, \"processed \"+filename)\n    return nil\n}\n\nfunc (c *CSVProcessor) GetResults() []string {\n    return c.results\n}\n\n// Returning an interface - this is NOT the Go way\nfunc NewFileProcessor() FileProcessor {\n    return &CSVProcessor{}\n}\n```\n\nThis looks familiar if you're used to dependency injection frameworks, but it's not idiomatic Go.\n\n## The Go Way: Accept Interfaces, Return Structs\n\nHere's how we'd restructure this following Go idioms:\n\n```go\n// Define interfaces for what we CONSUME\ntype FileReader interface {\n    Read(filename string) ([]byte, error)\n}\n\ntype Logger interface {\n    Log(message string)\n}\n\n// Return concrete structs\ntype CSVProcessor struct {\n    reader FileReader\n    logger Logger\n    Results []string\n}\n\n// Accept interfaces as parameters\nfunc NewCSVProcessor(reader FileReader, logger Logger) *CSVProcessor {\n    return &CSVProcessor{\n        reader: reader,\n        logger: logger,\n        Results: make([]string, 0),\n    }\n}\n\nfunc (c *CSVProcessor) ProcessFile(filename string) error {\n    data, err := c.reader.Read(filename)\n    if err != nil {\n        return err\n    }\n    \n    c.logger.Log(fmt.Sprintf(\"Processing file: %s\", filename))\n    \n    // Process the CSV data\n    c.Results = append(c.Results, \"processed \"+filename)\n    return nil\n}\n```\n\n## Why This Works Better\n\n### 1. **Flexibility at the Boundaries**\n\nWhen you accept interfaces, you make your functions incredibly flexible. Look at how easy it is to test our `CSVProcessor`:\n\n```go\n// Mock implementations for testing\ntype MockFileReader struct {\n    data []byte\n    err  error\n}\n\nfunc (m *MockFileReader) Read(filename string) ([]byte, error) {\n    return m.data, m.err\n}\n\ntype MockLogger struct {\n    messages []string\n}\n\nfunc (m *MockLogger) Log(message string) {\n    m.messages = append(m.messages, message)\n}\n\n// Easy to test!\nfunc TestCSVProcessor(t *testing.T) {\n    mockReader := &MockFileReader{data: []byte(\"test,data\"), err: nil}\n    mockLogger := &MockLogger{}\n    \n    processor := NewCSVProcessor(mockReader, mockLogger)\n    err := processor.ProcessFile(\"test.csv\")\n    \n    assert.NoError(t, err)\n    assert.Equal(t, []string{\"processed test.csv\"}, processor.Results)\n    assert.Equal(t, []string{\"Processing file: test.csv\"}, mockLogger.messages)\n}\n```\n\n### 2. **Concrete Types Are Self-Documenting**\n\nWhen you return a concrete struct, users of your API know exactly what they're getting:\n\n```go\nprocessor := NewCSVProcessor(fileReader, logger)\n// Users can see all available fields and methods\nfmt.Println(processor.Results)  // Direct access to results\nprocessor.ProcessFile(\"data.csv\")  // Clear method signatures\n```\n\nCompare this to returning an interface where users have to guess what methods are available or constantly check documentation.\n\n### 3. **Easier API Evolution**\n\nWhen you return structs, you can add new methods and fields without breaking existing code:\n\n```go\n// Adding new functionality is straightforward\nfunc (c *CSVProcessor) GetProcessedCount() int {\n    return len(c.Results)\n}\n\nfunc (c *CSVProcessor) Reset() {\n    c.Results = make([]string, 0)\n}\n```\n\nIf you had returned an interface, adding these methods would require updating the interface definition and potentially breaking existing implementations.\n\n## Real-World Example: HTTP Client\n\nHere's how this idiom appears in Go's standard library and real applications:\n\n```go\n// Accept interfaces for flexible input\ntype HTTPClient interface {\n    Do(req *http.Request) (*http.Response, error)\n}\n\ntype MetricsCollector interface {\n    RecordRequest(method, url string, duration time.Duration)\n}\n\n// Return concrete struct\ntype APIClient struct {\n    client     HTTPClient\n    metrics    MetricsCollector\n    BaseURL    string\n    UserAgent  string\n}\n\nfunc NewAPIClient(client HTTPClient, metrics MetricsCollector, baseURL string) *APIClient {\n    return &APIClient{\n        client:    client,\n        metrics:   metrics,\n        BaseURL:   baseURL,\n        UserAgent: \"MyApp/1.0\",\n    }\n}\n\nfunc (a *APIClient) GetUser(id string) (*User, error) {\n    start := time.Now()\n    defer func() {\n        a.metrics.RecordRequest(\"GET\", \"/users/\"+id, time.Since(start))\n    }()\n    \n    url := fmt.Sprintf(\"%s/users/%s\", a.BaseURL, id)\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        return nil, err\n    }\n    \n    req.Header.Set(\"User-Agent\", a.UserAgent)\n    \n    resp, err := a.client.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n    \n    var user User\n    if err := json.NewDecoder(resp.Body).Decode(&user); err != nil {\n        return nil, err\n    }\n    \n    return &user, nil\n}\n```\n\n## When to Break the Rule\n\nLike all idioms, this one has exceptions:\n\n### 1. **When You Need Runtime Polymorphism**\n\n```go\n// Sometimes you DO need to return interfaces\nfunc CreateProcessor(fileType string) FileProcessor {\n    switch fileType {\n    case \"csv\":\n        return &CSVProcessor{}\n    case \"json\":\n        return &JSONProcessor{}\n    default:\n        return &DefaultProcessor{}\n    }\n}\n```\n\n### 2. **When Interface Is the Core Abstraction**\n\n```go\n// io.Reader is returned because it IS the abstraction\nfunc OpenFile(filename string) (io.Reader, error) {\n    return os.Open(filename)\n}\n```\n\n## Key Takeaways\n\n1. **Accept interfaces** to make your functions flexible and testable\n2. **Return structs** to give users concrete, self-documenting types\n3. **Define interfaces at the point of use**, not at the point of implementation\n4. **Keep interfaces small** - the smaller the interface, the more useful it is\n5. **Don't create interfaces \"just in case\"** - create them when you need abstraction\n\n## The Mental Shift\n\nIf you're coming from other languages, this idiom represents a fundamental shift in thinking. Instead of designing inheritance hierarchies and abstract base classes, you're designing around behavior (interfaces) at consumption points while providing concrete, usable types as outputs.\n\nThis approach leads to more composable, testable, and maintainable code. It's one of the reasons Go codebases tend to be so readable and why the language encourages such clean architectural patterns.\n\nThe next time you're designing an API in Go, remember: be generous with what you accept (interfaces) and specific with what you return (structs). Your future self and your users will thank you.","src/content/blog/accept-interfaces-return-structs.md","ec486d66dea91856",{"html":123,"metadata":124},"\u003Ch1 id=\"accept-interfaces-return-structs-a-go-idiom-that-will-change-how-you-think-about-apis\">Accept Interfaces, Return Structs: A Go Idiom That Will Change How You Think About APIs\u003C/h1>\n\u003Cp>One of the most powerful and elegant idioms in Go is “accept interfaces, return structs.” If you’re coming from other languages, this might seem counterintuitive at first. After all, many object-oriented languages encourage you to return interfaces to hide implementation details. But Go’s approach is different, and once you understand why, it will fundamentally change how you design APIs.\u003C/p>\n\u003Ch2 id=\"what-does-accept-interfaces-return-structs-mean\">What Does “Accept Interfaces, Return Structs” Mean?\u003C/h2>\n\u003Cp>This idiom suggests that when designing functions and methods:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Parameters should be interfaces\u003C/strong> (when possible)\u003C/li>\n\u003Cli>\u003Cstrong>Return values should be concrete types\u003C/strong> (usually structs)\u003C/li>\n\u003C/ul>\n\u003Cp>Let’s see this in action with a practical example.\u003C/p>\n\u003Ch2 id=\"the-traditional-approach-what-not-to-do\">The Traditional Approach (What NOT to Do)\u003C/h2>\n\u003Cp>If you’re coming from Java or C#, you might be tempted to write something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// DON'T DO THIS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> FileProcessor\u003C/span>\u003Cspan style=\"color:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    ProcessFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">filename\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    GetResults\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() []\u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> CSVProcessor\u003C/span>\u003Cspan style=\"color:#F97583\"> struct\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    results []\u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">c \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">CSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">ProcessFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">filename\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Process CSV file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    c.results \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(c.results, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"processed \"\u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\">filename)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">c \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">CSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">GetResults\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() []\u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> c.results\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Returning an interface - this is NOT the Go way\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#B392F0\"> NewFileProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#B392F0\">FileProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">CSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This looks familiar if you’re used to dependency injection frameworks, but it’s not idiomatic Go.\u003C/p>\n\u003Ch2 id=\"the-go-way-accept-interfaces-return-structs\">The Go Way: Accept Interfaces, Return Structs\u003C/h2>\n\u003Cp>Here’s how we’d restructure this following Go idioms:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Define interfaces for what we CONSUME\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> FileReader\u003C/span>\u003Cspan style=\"color:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Read\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">filename\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) ([]\u003C/span>\u003Cspan style=\"color:#F97583\">byte\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> Logger\u003C/span>\u003Cspan style=\"color:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">message\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Return concrete structs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> CSVProcessor\u003C/span>\u003Cspan style=\"color:#F97583\"> struct\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    reader \u003C/span>\u003Cspan style=\"color:#B392F0\">FileReader\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    logger \u003C/span>\u003Cspan style=\"color:#B392F0\">Logger\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Results []\u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Accept interfaces as parameters\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#B392F0\"> NewCSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">reader\u003C/span>\u003Cspan style=\"color:#B392F0\"> FileReader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">logger\u003C/span>\u003Cspan style=\"color:#B392F0\"> Logger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">CSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">CSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        reader: reader,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        logger: logger,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        Results: \u003C/span>\u003Cspan style=\"color:#B392F0\">make\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([]\u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">c \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">CSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">ProcessFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">filename\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    data, err \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> c.reader.\u003C/span>\u003Cspan style=\"color:#B392F0\">Read\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> err \u003C/span>\u003Cspan style=\"color:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> err\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    c.logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">Log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(fmt.\u003C/span>\u003Cspan style=\"color:#B392F0\">Sprintf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Processing file: \u003C/span>\u003Cspan style=\"color:#79B8FF\">%s\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, filename))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Process the CSV data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    c.Results \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(c.Results, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"processed \"\u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\">filename)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"why-this-works-better\">Why This Works Better\u003C/h2>\n\u003Ch3 id=\"1-flexibility-at-the-boundaries\">1. \u003Cstrong>Flexibility at the Boundaries\u003C/strong>\u003C/h3>\n\u003Cp>When you accept interfaces, you make your functions incredibly flexible. Look at how easy it is to test our \u003Ccode>CSVProcessor\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Mock implementations for testing\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> MockFileReader\u003C/span>\u003Cspan style=\"color:#F97583\"> struct\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    data []\u003C/span>\u003Cspan style=\"color:#F97583\">byte\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    err  \u003C/span>\u003Cspan style=\"color:#F97583\">error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">m \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">MockFileReader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">Read\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">filename\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) ([]\u003C/span>\u003Cspan style=\"color:#F97583\">byte\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> m.data, m.err\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> MockLogger\u003C/span>\u003Cspan style=\"color:#F97583\"> struct\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    messages []\u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">m \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">MockLogger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">Log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">message\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    m.messages \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(m.messages, message)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Easy to test!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#B392F0\"> TestCSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">t\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#B392F0\">testing\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    mockReader \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">MockFileReader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{data: []\u003C/span>\u003Cspan style=\"color:#F97583\">byte\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"test,data\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">), err: \u003C/span>\u003Cspan style=\"color:#79B8FF\">nil\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    mockLogger \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">MockLogger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    processor \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#B392F0\"> NewCSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(mockReader, mockLogger)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    err \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> processor.\u003C/span>\u003Cspan style=\"color:#B392F0\">ProcessFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"test.csv\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    assert.\u003C/span>\u003Cspan style=\"color:#B392F0\">NoError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(t, err)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    assert.\u003C/span>\u003Cspan style=\"color:#B392F0\">Equal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(t, []\u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"processed test.csv\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}, processor.Results)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    assert.\u003C/span>\u003Cspan style=\"color:#B392F0\">Equal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(t, []\u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Processing file: test.csv\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}, mockLogger.messages)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-concrete-types-are-self-documenting\">2. \u003Cstrong>Concrete Types Are Self-Documenting\u003C/strong>\u003C/h3>\n\u003Cp>When you return a concrete struct, users of your API know exactly what they’re getting:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">processor \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#B392F0\"> NewCSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(fileReader, logger)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Users can see all available fields and methods\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">fmt.\u003C/span>\u003Cspan style=\"color:#B392F0\">Println\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(processor.Results)  \u003C/span>\u003Cspan style=\"color:#6A737D\">// Direct access to results\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">processor.\u003C/span>\u003Cspan style=\"color:#B392F0\">ProcessFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"data.csv\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)  \u003C/span>\u003Cspan style=\"color:#6A737D\">// Clear method signatures\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Compare this to returning an interface where users have to guess what methods are available or constantly check documentation.\u003C/p>\n\u003Ch3 id=\"3-easier-api-evolution\">3. \u003Cstrong>Easier API Evolution\u003C/strong>\u003C/h3>\n\u003Cp>When you return structs, you can add new methods and fields without breaking existing code:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Adding new functionality is straightforward\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">c \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">CSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">GetProcessedCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(c.Results)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">c \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">CSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">Reset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    c.Results \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> make\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([]\u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you had returned an interface, adding these methods would require updating the interface definition and potentially breaking existing implementations.\u003C/p>\n\u003Ch2 id=\"real-world-example-http-client\">Real-World Example: HTTP Client\u003C/h2>\n\u003Cp>Here’s how this idiom appears in Go’s standard library and real applications:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Accept interfaces for flexible input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTTPClient\u003C/span>\u003Cspan style=\"color:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Do\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">req\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#B392F0\">http\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) (\u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">http\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> MetricsCollector\u003C/span>\u003Cspan style=\"color:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    RecordRequest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">method\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">url\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">duration\u003C/span>\u003Cspan style=\"color:#B392F0\"> time\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Duration\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Return concrete struct\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> APIClient\u003C/span>\u003Cspan style=\"color:#F97583\"> struct\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    client     \u003C/span>\u003Cspan style=\"color:#B392F0\">HTTPClient\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    metrics    \u003C/span>\u003Cspan style=\"color:#B392F0\">MetricsCollector\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    BaseURL    \u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    UserAgent  \u003C/span>\u003Cspan style=\"color:#F97583\">string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#B392F0\"> NewAPIClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">client\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTTPClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">metrics\u003C/span>\u003Cspan style=\"color:#B392F0\"> MetricsCollector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">baseURL\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">APIClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">APIClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        client:    client,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        metrics:   metrics,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        BaseURL:   baseURL,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        UserAgent: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"MyApp/1.0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">a \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">APIClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">GetUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">id\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) (\u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#B392F0\">User\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    start \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> time.\u003C/span>\u003Cspan style=\"color:#B392F0\">Now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    defer\u003C/span>\u003Cspan style=\"color:#F97583\"> func\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        a.metrics.\u003C/span>\u003Cspan style=\"color:#B392F0\">RecordRequest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"GET\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/users/\"\u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\">id, time.\u003C/span>\u003Cspan style=\"color:#B392F0\">Since\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(start))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    url \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fmt.\u003C/span>\u003Cspan style=\"color:#B392F0\">Sprintf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">%s\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/users/\u003C/span>\u003Cspan style=\"color:#79B8FF\">%s\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, a.BaseURL, id)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    req, err \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> http.\u003C/span>\u003Cspan style=\"color:#B392F0\">NewRequest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"GET\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, url, \u003C/span>\u003Cspan style=\"color:#79B8FF\">nil\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> err \u003C/span>\u003Cspan style=\"color:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, err\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    req.Header.\u003C/span>\u003Cspan style=\"color:#B392F0\">Set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"User-Agent\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, a.UserAgent)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    resp, err \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a.client.\u003C/span>\u003Cspan style=\"color:#B392F0\">Do\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(req)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> err \u003C/span>\u003Cspan style=\"color:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, err\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    defer\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> resp.Body.\u003C/span>\u003Cspan style=\"color:#B392F0\">Close\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> user \u003C/span>\u003Cspan style=\"color:#B392F0\">User\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> err \u003C/span>\u003Cspan style=\"color:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> json.\u003C/span>\u003Cspan style=\"color:#B392F0\">NewDecoder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(resp.Body).\u003C/span>\u003Cspan style=\"color:#B392F0\">Decode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">user); err \u003C/span>\u003Cspan style=\"color:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, err\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">user, \u003C/span>\u003Cspan style=\"color:#79B8FF\">nil\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"when-to-break-the-rule\">When to Break the Rule\u003C/h2>\n\u003Cp>Like all idioms, this one has exceptions:\u003C/p>\n\u003Ch3 id=\"1-when-you-need-runtime-polymorphism\">1. \u003Cstrong>When You Need Runtime Polymorphism\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Sometimes you DO need to return interfaces\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#B392F0\"> CreateProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">fileType\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">FileProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    switch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fileType {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"csv\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">CSVProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"json\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">JSONProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    default\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">DefaultProcessor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-when-interface-is-the-core-abstraction\">2. \u003Cstrong>When Interface Is the Core Abstraction\u003C/strong>\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// io.Reader is returned because it IS the abstraction\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">func\u003C/span>\u003Cspan style=\"color:#B392F0\"> OpenFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">filename\u003C/span>\u003Cspan style=\"color:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) (\u003C/span>\u003Cspan style=\"color:#B392F0\">io\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Reader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> os.\u003C/span>\u003Cspan style=\"color:#B392F0\">Open\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(filename)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"key-takeaways\">Key Takeaways\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Accept interfaces\u003C/strong> to make your functions flexible and testable\u003C/li>\n\u003Cli>\u003Cstrong>Return structs\u003C/strong> to give users concrete, self-documenting types\u003C/li>\n\u003Cli>\u003Cstrong>Define interfaces at the point of use\u003C/strong>, not at the point of implementation\u003C/li>\n\u003Cli>\u003Cstrong>Keep interfaces small\u003C/strong> - the smaller the interface, the more useful it is\u003C/li>\n\u003Cli>\u003Cstrong>Don’t create interfaces “just in case”\u003C/strong> - create them when you need abstraction\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"the-mental-shift\">The Mental Shift\u003C/h2>\n\u003Cp>If you’re coming from other languages, this idiom represents a fundamental shift in thinking. Instead of designing inheritance hierarchies and abstract base classes, you’re designing around behavior (interfaces) at consumption points while providing concrete, usable types as outputs.\u003C/p>\n\u003Cp>This approach leads to more composable, testable, and maintainable code. It’s one of the reasons Go codebases tend to be so readable and why the language encourages such clean architectural patterns.\u003C/p>\n\u003Cp>The next time you’re designing an API in Go, remember: be generous with what you accept (interfaces) and specific with what you return (structs). Your future self and your users will thank you.\u003C/p>",{"headings":125,"localImagePaths":168,"remoteImagePaths":169,"frontmatter":170,"imagePaths":173},[126,129,132,135,138,141,144,147,150,153,156,159,162,165],{"depth":38,"slug":127,"text":128},"accept-interfaces-return-structs-a-go-idiom-that-will-change-how-you-think-about-apis","Accept Interfaces, Return Structs: A Go Idiom That Will Change How You Think About APIs",{"depth":40,"slug":130,"text":131},"what-does-accept-interfaces-return-structs-mean","What Does “Accept Interfaces, Return Structs” Mean?",{"depth":40,"slug":133,"text":134},"the-traditional-approach-what-not-to-do","The Traditional Approach (What NOT to Do)",{"depth":40,"slug":136,"text":137},"the-go-way-accept-interfaces-return-structs","The Go Way: Accept Interfaces, Return Structs",{"depth":40,"slug":139,"text":140},"why-this-works-better","Why This Works Better",{"depth":47,"slug":142,"text":143},"1-flexibility-at-the-boundaries","1. Flexibility at the Boundaries",{"depth":47,"slug":145,"text":146},"2-concrete-types-are-self-documenting","2. Concrete Types Are Self-Documenting",{"depth":47,"slug":148,"text":149},"3-easier-api-evolution","3. Easier API Evolution",{"depth":40,"slug":151,"text":152},"real-world-example-http-client","Real-World Example: HTTP Client",{"depth":40,"slug":154,"text":155},"when-to-break-the-rule","When to Break the Rule",{"depth":47,"slug":157,"text":158},"1-when-you-need-runtime-polymorphism","1. When You Need Runtime Polymorphism",{"depth":47,"slug":160,"text":161},"2-when-interface-is-the-core-abstraction","2. When Interface Is the Core Abstraction",{"depth":40,"slug":163,"text":164},"key-takeaways","Key Takeaways",{"depth":40,"slug":166,"text":167},"the-mental-shift","The Mental Shift",[],[],{"title":110,"description":111,"publishDate":171,"tags":172,"featured":24,"draft":118},["Date","2024-01-10T00:00:00.000Z"],[114,115,116,49,117],[],"accept-interfaces-return-structs.md","getting-started-with-astro",{"id":175,"data":177,"body":185,"filePath":186,"digest":187,"rendered":188,"legacyId":218},{"title":178,"description":179,"publishDate":180,"tags":181,"featured":24,"draft":118},"Getting Started with Astro: A Modern Static Site Generator","Learn how to build fast, content-focused websites with Astro's unique island architecture",["Date","2024-01-10T00:00:00.000Z"],[76,182,183,184],"Web Development","Static Sites","Performance","# Getting Started with Astro: A Modern Static Site Generator\n\nAstro has been gaining significant traction in the web development community, and for good reason. It offers a unique approach to building websites that prioritizes performance and developer experience.\n\n## What Makes Astro Different?\n\nAstro's key innovation is its **island architecture**. Unlike traditional frameworks that hydrate the entire page, Astro only hydrates the interactive components that need JavaScript, leaving the rest as static HTML.\n\n### Key Benefits\n\n1. **Zero JavaScript by Default**: Astro ships zero JavaScript to the browser unless you explicitly need it\n2. **Framework Agnostic**: Use React, Vue, Svelte, or any other framework within the same project\n3. **Content Collections**: Built-in content management for blogs and documentation\n4. **Excellent Performance**: Lighthouse scores of 100 are common with Astro sites\n\n## Building Your First Astro Site\n\nLet's walk through creating a simple Astro project:\n\n```bash\n# Create a new Astro project\nnpm create astro@latest my-astro-site\n\n# Navigate to the project\ncd my-astro-site\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n```\n\n## Content Collections\n\nOne of Astro's standout features is content collections. They provide type-safe content management:\n\n```typescript\n// src/content/config.ts\nimport { defineCollection, z } from 'astro:content';\n\nconst blogCollection = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    publishDate: z.date(),\n    tags: z.array(z.string()).optional(),\n  }),\n});\n\nexport const collections = {\n  'blog': blogCollection,\n};\n```\n\n## Performance Out of the Box\n\nAstro's performance benefits come from several optimizations:\n\n- **Static HTML Generation**: Most content is pre-rendered at build time\n- **Selective Hydration**: Only interactive components load JavaScript\n- **Automatic Code Splitting**: JavaScript is automatically split by component\n- **Image Optimization**: Built-in image optimization and lazy loading\n\n## Conclusion\n\nAstro represents a paradigm shift in how we think about web development. By defaulting to static HTML and selectively adding interactivity, it delivers exceptional performance while maintaining developer productivity.\n\nWhether you're building a blog, documentation site, or marketing pages, Astro is worth considering for your next project.","src/content/blog/getting-started-with-astro.md","f2a3cfeac51ccf2d",{"html":189,"metadata":190},"\u003Ch1 id=\"getting-started-with-astro-a-modern-static-site-generator\">Getting Started with Astro: A Modern Static Site Generator\u003C/h1>\n\u003Cp>Astro has been gaining significant traction in the web development community, and for good reason. It offers a unique approach to building websites that prioritizes performance and developer experience.\u003C/p>\n\u003Ch2 id=\"what-makes-astro-different\">What Makes Astro Different?\u003C/h2>\n\u003Cp>Astro’s key innovation is its \u003Cstrong>island architecture\u003C/strong>. Unlike traditional frameworks that hydrate the entire page, Astro only hydrates the interactive components that need JavaScript, leaving the rest as static HTML.\u003C/p>\n\u003Ch3 id=\"key-benefits\">Key Benefits\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Zero JavaScript by Default\u003C/strong>: Astro ships zero JavaScript to the browser unless you explicitly need it\u003C/li>\n\u003Cli>\u003Cstrong>Framework Agnostic\u003C/strong>: Use React, Vue, Svelte, or any other framework within the same project\u003C/li>\n\u003Cli>\u003Cstrong>Content Collections\u003C/strong>: Built-in content management for blogs and documentation\u003C/li>\n\u003Cli>\u003Cstrong>Excellent Performance\u003C/strong>: Lighthouse scores of 100 are common with Astro sites\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"building-your-first-astro-site\">Building Your First Astro Site\u003C/h2>\n\u003Cp>Let’s walk through creating a simple Astro project:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Create a new Astro project\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> create\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> astro@latest\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my-astro-site\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Navigate to the project\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my-astro-site\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Install dependencies\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Start the development server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dev\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"content-collections\">Content Collections\u003C/h2>\n\u003Cp>One of Astro’s standout features is content collections. They provide type-safe content management:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// src/content/config.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { defineCollection, z } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'astro:content'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> blogCollection\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> defineCollection\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  type: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'content'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  schema: z.\u003C/span>\u003Cspan style=\"color:#B392F0\">object\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    title: z.\u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    publishDate: z.\u003C/span>\u003Cspan style=\"color:#B392F0\">date\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    tags: z.\u003C/span>\u003Cspan style=\"color:#B392F0\">array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(z.\u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()).\u003C/span>\u003Cspan style=\"color:#B392F0\">optional\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> collections\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'blog'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: blogCollection,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"performance-out-of-the-box\">Performance Out of the Box\u003C/h2>\n\u003Cp>Astro’s performance benefits come from several optimizations:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Static HTML Generation\u003C/strong>: Most content is pre-rendered at build time\u003C/li>\n\u003Cli>\u003Cstrong>Selective Hydration\u003C/strong>: Only interactive components load JavaScript\u003C/li>\n\u003Cli>\u003Cstrong>Automatic Code Splitting\u003C/strong>: JavaScript is automatically split by component\u003C/li>\n\u003Cli>\u003Cstrong>Image Optimization\u003C/strong>: Built-in image optimization and lazy loading\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Astro represents a paradigm shift in how we think about web development. By defaulting to static HTML and selectively adding interactivity, it delivers exceptional performance while maintaining developer productivity.\u003C/p>\n\u003Cp>Whether you’re building a blog, documentation site, or marketing pages, Astro is worth considering for your next project.\u003C/p>",{"headings":191,"localImagePaths":212,"remoteImagePaths":213,"frontmatter":214,"imagePaths":217},[192,194,197,200,203,206,209],{"depth":38,"slug":193,"text":178},"getting-started-with-astro-a-modern-static-site-generator",{"depth":40,"slug":195,"text":196},"what-makes-astro-different","What Makes Astro Different?",{"depth":47,"slug":198,"text":199},"key-benefits","Key Benefits",{"depth":40,"slug":201,"text":202},"building-your-first-astro-site","Building Your First Astro Site",{"depth":40,"slug":204,"text":205},"content-collections","Content Collections",{"depth":40,"slug":207,"text":208},"performance-out-of-the-box","Performance Out of the Box",{"depth":40,"slug":210,"text":211},"conclusion","Conclusion",[],[],{"title":178,"description":179,"publishDate":215,"tags":216,"featured":24,"draft":118},["Date","2024-01-10T00:00:00.000Z"],[76,182,183,184],[],"getting-started-with-astro.md","typescript-best-practices",{"id":219,"data":221,"body":227,"filePath":228,"digest":229,"rendered":230,"legacyId":261},{"title":222,"description":223,"publishDate":224,"tags":225,"featured":118,"draft":118},"TypeScript Best Practices for Modern Web Development","Essential TypeScript patterns and practices for building maintainable applications",["Date","2024-01-25T00:00:00.000Z"],[19,226,116,117],"JavaScript","# TypeScript Best Practices for Modern Web Development\n\nTypeScript has become the de facto standard for large-scale JavaScript applications. Here are some essential best practices to help you write better TypeScript code.\n\n## 1. Use Strict Mode\n\nAlways enable strict mode in your `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true\n  }\n}\n```\n\n## 2. Prefer Type Inference\n\nLet TypeScript infer types when possible:\n\n```typescript\n// Good - type is inferred\nconst users = ['Alice', 'Bob', 'Charlie'];\n\n// Unnecessary - type annotation is redundant\nconst users: string[] = ['Alice', 'Bob', 'Charlie'];\n```\n\n## 3. Use Union Types Effectively\n\nUnion types are powerful for modeling data that can be one of several types:\n\n```typescript\ntype Status = 'loading' | 'success' | 'error';\n\ninterface ApiResponse {\n  status: Status;\n  data?: any;\n  error?: string;\n}\n```\n\n## 4. Leverage Utility Types\n\nTypeScript provides many built-in utility types:\n\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  isActive: boolean;\n}\n\n// Create a type with only some properties\ntype UserPreview = Pick\u003CUser, 'id' | 'name'>;\n\n// Make all properties optional\ntype PartialUser = Partial\u003CUser>;\n\n// Make all properties required\ntype RequiredUser = Required\u003CUser>;\n```\n\n## 5. Use Discriminated Unions\n\nFor complex state management, discriminated unions are invaluable:\n\n```typescript\ntype LoadingState = {\n  status: 'loading';\n};\n\ntype SuccessState = {\n  status: 'success';\n  data: any;\n};\n\ntype ErrorState = {\n  status: 'error';\n  error: string;\n};\n\ntype AppState = LoadingState | SuccessState | ErrorState;\n\nfunction handleState(state: AppState) {\n  switch (state.status) {\n    case 'loading':\n      // TypeScript knows this is LoadingState\n      break;\n    case 'success':\n      // TypeScript knows this is SuccessState\n      console.log(state.data);\n      break;\n    case 'error':\n      // TypeScript knows this is ErrorState\n      console.error(state.error);\n      break;\n  }\n}\n```\n\n## 6. Generic Constraints\n\nUse generic constraints to make your functions more flexible yet type-safe:\n\n```typescript\ninterface Identifiable {\n  id: number;\n}\n\nfunction updateEntity\u003CT extends Identifiable>(\n  entity: T,\n  updates: Partial\u003CT>\n): T {\n  return { ...entity, ...updates };\n}\n```\n\n## Conclusion\n\nThese practices will help you write more maintainable and type-safe TypeScript code. Remember, the goal is to leverage TypeScript's type system to catch errors at compile time and improve developer experience.","src/content/blog/typescript-best-practices.md","ed944c6dcf11cca7",{"html":231,"metadata":232},"\u003Ch1 id=\"typescript-best-practices-for-modern-web-development\">TypeScript Best Practices for Modern Web Development\u003C/h1>\n\u003Cp>TypeScript has become the de facto standard for large-scale JavaScript applications. Here are some essential best practices to help you write better TypeScript code.\u003C/p>\n\u003Ch2 id=\"1-use-strict-mode\">1. Use Strict Mode\u003C/h2>\n\u003Cp>Always enable strict mode in your \u003Ccode>tsconfig.json\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"compilerOptions\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"strict\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"noImplicitAny\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"strictNullChecks\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"strictFunctionTypes\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"2-prefer-type-inference\">2. Prefer Type Inference\u003C/h2>\n\u003Cp>Let TypeScript infer types when possible:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Good - type is inferred\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> users\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Alice'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Bob'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Charlie'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Unnecessary - type annotation is redundant\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> users\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Alice'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Bob'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Charlie'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"3-use-union-types-effectively\">3. Use Union Types Effectively\u003C/h2>\n\u003Cp>Union types are powerful for modeling data that can be one of several types:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> Status\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'loading'\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'success'\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'error'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> ApiResponse\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  status\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Status\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  data\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  error\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"4-leverage-utility-types\">4. Leverage Utility Types\u003C/h2>\n\u003Cp>TypeScript provides many built-in utility types:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> User\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  name\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  email\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  isActive\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> boolean\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Create a type with only some properties\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> UserPreview\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Pick\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">User\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'id'\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'name'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Make all properties optional\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> PartialUser\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Partial\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">User\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Make all properties required\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> RequiredUser\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Required\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">User\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"5-use-discriminated-unions\">5. Use Discriminated Unions\u003C/h2>\n\u003Cp>For complex state management, discriminated unions are invaluable:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> LoadingState\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  status\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'loading'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> SuccessState\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  status\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'success'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  data\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> ErrorState\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  status\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'error'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  error\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> AppState\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> LoadingState\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> SuccessState\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> ErrorState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">state\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> AppState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  switch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (state.status) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'loading'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // TypeScript knows this is LoadingState\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'success'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // TypeScript knows this is SuccessState\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(state.data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'error'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // TypeScript knows this is ErrorState\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      console.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(state.error);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"6-generic-constraints\">6. Generic Constraints\u003C/h2>\n\u003Cp>Use generic constraints to make your functions more flexible yet type-safe:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> Identifiable\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> updateEntity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Identifiable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  entity\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  updates\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Partial\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">entity, \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">updates };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>These practices will help you write more maintainable and type-safe TypeScript code. Remember, the goal is to leverage TypeScript’s type system to catch errors at compile time and improve developer experience.\u003C/p>",{"headings":233,"localImagePaths":255,"remoteImagePaths":256,"frontmatter":257,"imagePaths":260},[234,236,239,242,245,248,251,254],{"depth":38,"slug":235,"text":222},"typescript-best-practices-for-modern-web-development",{"depth":40,"slug":237,"text":238},"1-use-strict-mode","1. Use Strict Mode",{"depth":40,"slug":240,"text":241},"2-prefer-type-inference","2. Prefer Type Inference",{"depth":40,"slug":243,"text":244},"3-use-union-types-effectively","3. Use Union Types Effectively",{"depth":40,"slug":246,"text":247},"4-leverage-utility-types","4. Leverage Utility Types",{"depth":40,"slug":249,"text":250},"5-use-discriminated-unions","5. Use Discriminated Unions",{"depth":40,"slug":252,"text":253},"6-generic-constraints","6. Generic Constraints",{"depth":40,"slug":210,"text":211},[],[],{"title":222,"description":223,"publishDate":258,"tags":259,"featured":118,"draft":118},["Date","2024-01-25T00:00:00.000Z"],[19,226,116,117],[],"typescript-best-practices.md"]