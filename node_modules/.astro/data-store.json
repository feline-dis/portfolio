[["Map",1,2,9,10,131,132],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.0","content-config-digest","bfb150af68556158","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://portfolio.example.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"assets\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"prefetch\":{\"prefetchAll\":true,\"defaultStrategy\":\"viewport\"},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"prism\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"dark-plus\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,55,56,97,98],"e-commerce-api",{"id":11,"data":13,"body":27,"filePath":28,"digest":29,"rendered":30,"legacyId":54},{"title":14,"description":15,"technologies":16,"featured":22,"githubUrl":23,"images":24,"publishDate":26},"E-commerce REST API","A scalable e-commerce backend API with payment processing and inventory management",[17,18,19,20,21],"Python","FastAPI","PostgreSQL","Redis","Docker",true,"https://github.com/username/ecommerce-api",[25],"/images/projects/api-docs.png",["Date","2023-11-20T00:00:00.000Z"],"# E-commerce REST API\n\nA robust backend API for e-commerce applications, featuring comprehensive product management, order processing, and payment integration.\n\n## Core Features\n\n- **Product Management**: CRUD operations for products, categories, and inventory\n- **Order Processing**: Complete order lifecycle management\n- **Payment Integration**: Stripe and PayPal payment processing\n- **User Management**: Authentication, authorization, and user profiles\n- **Admin Dashboard**: Administrative endpoints for business management\n\n## Architecture\n\n- **FastAPI Framework**: High-performance async API with automatic documentation\n- **PostgreSQL**: Relational database for transactional data integrity\n- **Redis**: Caching layer for improved performance\n- **Docker**: Containerized deployment for scalability\n- **JWT Authentication**: Secure token-based authentication\n\n## Performance & Scalability\n\n- **Async Operations**: Non-blocking I/O for high concurrency\n- **Database Optimization**: Indexed queries and connection pooling\n- **Caching Strategy**: Redis caching for frequently accessed data\n- **Rate Limiting**: API rate limiting to prevent abuse\n- **Monitoring**: Comprehensive logging and error tracking\n\nThis project demonstrates expertise in backend development, database design, and API architecture.","src/content/projects/e-commerce-api.md","6dade21e24b1d96b",{"html":31,"metadata":32},"\u003Ch1 id=\"e-commerce-rest-api\">E-commerce REST API\u003C/h1>\n\u003Cp>A robust backend API for e-commerce applications, featuring comprehensive product management, order processing, and payment integration.\u003C/p>\n\u003Ch2 id=\"core-features\">Core Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Product Management\u003C/strong>: CRUD operations for products, categories, and inventory\u003C/li>\n\u003Cli>\u003Cstrong>Order Processing\u003C/strong>: Complete order lifecycle management\u003C/li>\n\u003Cli>\u003Cstrong>Payment Integration\u003C/strong>: Stripe and PayPal payment processing\u003C/li>\n\u003Cli>\u003Cstrong>User Management\u003C/strong>: Authentication, authorization, and user profiles\u003C/li>\n\u003Cli>\u003Cstrong>Admin Dashboard\u003C/strong>: Administrative endpoints for business management\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"architecture\">Architecture\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>FastAPI Framework\u003C/strong>: High-performance async API with automatic documentation\u003C/li>\n\u003Cli>\u003Cstrong>PostgreSQL\u003C/strong>: Relational database for transactional data integrity\u003C/li>\n\u003Cli>\u003Cstrong>Redis\u003C/strong>: Caching layer for improved performance\u003C/li>\n\u003Cli>\u003Cstrong>Docker\u003C/strong>: Containerized deployment for scalability\u003C/li>\n\u003Cli>\u003Cstrong>JWT Authentication\u003C/strong>: Secure token-based authentication\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"performance--scalability\">Performance &#x26; Scalability\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Async Operations\u003C/strong>: Non-blocking I/O for high concurrency\u003C/li>\n\u003Cli>\u003Cstrong>Database Optimization\u003C/strong>: Indexed queries and connection pooling\u003C/li>\n\u003Cli>\u003Cstrong>Caching Strategy\u003C/strong>: Redis caching for frequently accessed data\u003C/li>\n\u003Cli>\u003Cstrong>Rate Limiting\u003C/strong>: API rate limiting to prevent abuse\u003C/li>\n\u003Cli>\u003Cstrong>Monitoring\u003C/strong>: Comprehensive logging and error tracking\u003C/li>\n\u003C/ul>\n\u003Cp>This project demonstrates expertise in backend development, database design, and API architecture.\u003C/p>",{"headings":33,"localImagePaths":47,"remoteImagePaths":48,"frontmatter":49,"imagePaths":53},[34,37,41,44],{"depth":35,"slug":36,"text":14},1,"e-commerce-rest-api",{"depth":38,"slug":39,"text":40},2,"core-features","Core Features",{"depth":38,"slug":42,"text":43},"architecture","Architecture",{"depth":38,"slug":45,"text":46},"performance--scalability","Performance & Scalability",[],[],{"title":14,"description":15,"technologies":50,"featured":22,"githubUrl":23,"images":51,"publishDate":52},[17,18,19,20,21],[25],["Date","2023-11-20T00:00:00.000Z"],[],"e-commerce-api.md","task-manager-app",{"id":55,"data":57,"body":72,"filePath":73,"digest":74,"rendered":75,"legacyId":96},{"title":58,"description":59,"technologies":60,"featured":22,"liveUrl":66,"githubUrl":67,"images":68,"publishDate":71},"Task Manager App","A full-stack task management application built with React and Node.js",[61,62,63,64,65],"React","Node.js","Express","MongoDB","TypeScript","https://taskmanager-demo.com","https://github.com/username/task-manager",[69,70],"/images/projects/task-manager-1.png","/images/projects/task-manager-2.png",["Date","2024-01-15T00:00:00.000Z"],"# Task Manager App\n\nA comprehensive task management application that helps users organize their daily tasks and projects. Built with modern web technologies for optimal performance and user experience.\n\n## Features\n\n- **Task Creation & Management**: Create, edit, and delete tasks with due dates and priorities\n- **Project Organization**: Group tasks into projects for better organization\n- **Real-time Updates**: Live synchronization across multiple devices\n- **User Authentication**: Secure login and user management\n- **Responsive Design**: Works seamlessly on desktop and mobile devices\n\n## Technical Implementation\n\nThe application follows a modern full-stack architecture:\n\n- **Frontend**: React with TypeScript for type safety and better developer experience\n- **Backend**: Node.js with Express for RESTful API endpoints\n- **Database**: MongoDB for flexible document storage\n- **Authentication**: JWT-based authentication system\n- **Deployment**: Containerized with Docker for consistent deployment\n\n## Key Challenges Solved\n\n1. **Real-time Synchronization**: Implemented WebSocket connections for instant updates\n2. **Performance Optimization**: Used React.memo and useMemo for efficient re-renders\n3. **Data Validation**: Comprehensive input validation on both client and server\n4. **Error Handling**: Graceful error handling with user-friendly messages\n\nThis project demonstrates proficiency in full-stack development, modern JavaScript frameworks, and database design.","src/content/projects/task-manager-app.md","50e74bf03bff1fc7",{"html":76,"metadata":77},"\u003Ch1 id=\"task-manager-app\">Task Manager App\u003C/h1>\n\u003Cp>A comprehensive task management application that helps users organize their daily tasks and projects. Built with modern web technologies for optimal performance and user experience.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Task Creation &#x26; Management\u003C/strong>: Create, edit, and delete tasks with due dates and priorities\u003C/li>\n\u003Cli>\u003Cstrong>Project Organization\u003C/strong>: Group tasks into projects for better organization\u003C/li>\n\u003Cli>\u003Cstrong>Real-time Updates\u003C/strong>: Live synchronization across multiple devices\u003C/li>\n\u003Cli>\u003Cstrong>User Authentication\u003C/strong>: Secure login and user management\u003C/li>\n\u003Cli>\u003Cstrong>Responsive Design\u003C/strong>: Works seamlessly on desktop and mobile devices\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"technical-implementation\">Technical Implementation\u003C/h2>\n\u003Cp>The application follows a modern full-stack architecture:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Frontend\u003C/strong>: React with TypeScript for type safety and better developer experience\u003C/li>\n\u003Cli>\u003Cstrong>Backend\u003C/strong>: Node.js with Express for RESTful API endpoints\u003C/li>\n\u003Cli>\u003Cstrong>Database\u003C/strong>: MongoDB for flexible document storage\u003C/li>\n\u003Cli>\u003Cstrong>Authentication\u003C/strong>: JWT-based authentication system\u003C/li>\n\u003Cli>\u003Cstrong>Deployment\u003C/strong>: Containerized with Docker for consistent deployment\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"key-challenges-solved\">Key Challenges Solved\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Real-time Synchronization\u003C/strong>: Implemented WebSocket connections for instant updates\u003C/li>\n\u003Cli>\u003Cstrong>Performance Optimization\u003C/strong>: Used React.memo and useMemo for efficient re-renders\u003C/li>\n\u003Cli>\u003Cstrong>Data Validation\u003C/strong>: Comprehensive input validation on both client and server\u003C/li>\n\u003Cli>\u003Cstrong>Error Handling\u003C/strong>: Graceful error handling with user-friendly messages\u003C/li>\n\u003C/ol>\n\u003Cp>This project demonstrates proficiency in full-stack development, modern JavaScript frameworks, and database design.\u003C/p>",{"headings":78,"localImagePaths":89,"remoteImagePaths":90,"frontmatter":91,"imagePaths":95},[79,80,83,86],{"depth":35,"slug":55,"text":58},{"depth":38,"slug":81,"text":82},"features","Features",{"depth":38,"slug":84,"text":85},"technical-implementation","Technical Implementation",{"depth":38,"slug":87,"text":88},"key-challenges-solved","Key Challenges Solved",[],[],{"title":58,"description":59,"technologies":92,"featured":22,"liveUrl":66,"githubUrl":67,"images":93,"publishDate":94},[61,62,63,64,65],[69,70],["Date","2024-01-15T00:00:00.000Z"],[],"task-manager-app.md","portfolio-website",{"id":97,"data":99,"body":111,"filePath":112,"digest":113,"rendered":114,"legacyId":130},{"title":100,"description":101,"technologies":102,"featured":22,"liveUrl":106,"githubUrl":107,"images":108,"publishDate":110},"Portfolio Website","A modern portfolio website built with Astro and TypeScript",[103,65,104,105],"Astro","CSS","Markdown","https://myportfolio.dev","https://github.com/username/portfolio",[109],"/images/projects/portfolio-1.png",["Date","2024-02-01T00:00:00.000Z"],"# Portfolio Website\n\nA personal portfolio website showcasing projects and blog posts, built with Astro for optimal performance and SEO.\n\n## Features\n\n- **Static Site Generation**: Lightning-fast loading with pre-rendered pages\n- **Content Collections**: Organized project and blog content management\n- **Dark Theme**: Minimalistic dark design for better readability\n- **Responsive Design**: Mobile-first approach for all screen sizes\n- **SEO Optimized**: Comprehensive meta tags and structured data\n\n## Technical Highlights\n\n- **Astro Framework**: Leverages Astro's island architecture for optimal performance\n- **TypeScript**: Full type safety throughout the codebase\n- **Content Management**: Markdown-based content with frontmatter validation\n- **Image Optimization**: Automatic image optimization and lazy loading\n- **Accessibility**: WCAG compliant with proper semantic HTML\n\nThis project showcases modern web development practices and static site generation techniques.","src/content/projects/portfolio-website.md","c5e9688e47791f0a",{"html":115,"metadata":116},"\u003Ch1 id=\"portfolio-website\">Portfolio Website\u003C/h1>\n\u003Cp>A personal portfolio website showcasing projects and blog posts, built with Astro for optimal performance and SEO.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Static Site Generation\u003C/strong>: Lightning-fast loading with pre-rendered pages\u003C/li>\n\u003Cli>\u003Cstrong>Content Collections\u003C/strong>: Organized project and blog content management\u003C/li>\n\u003Cli>\u003Cstrong>Dark Theme\u003C/strong>: Minimalistic dark design for better readability\u003C/li>\n\u003Cli>\u003Cstrong>Responsive Design\u003C/strong>: Mobile-first approach for all screen sizes\u003C/li>\n\u003Cli>\u003Cstrong>SEO Optimized\u003C/strong>: Comprehensive meta tags and structured data\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"technical-highlights\">Technical Highlights\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Astro Framework\u003C/strong>: Leverages Astro’s island architecture for optimal performance\u003C/li>\n\u003Cli>\u003Cstrong>TypeScript\u003C/strong>: Full type safety throughout the codebase\u003C/li>\n\u003Cli>\u003Cstrong>Content Management\u003C/strong>: Markdown-based content with frontmatter validation\u003C/li>\n\u003Cli>\u003Cstrong>Image Optimization\u003C/strong>: Automatic image optimization and lazy loading\u003C/li>\n\u003Cli>\u003Cstrong>Accessibility\u003C/strong>: WCAG compliant with proper semantic HTML\u003C/li>\n\u003C/ul>\n\u003Cp>This project showcases modern web development practices and static site generation techniques.\u003C/p>",{"headings":117,"localImagePaths":123,"remoteImagePaths":124,"frontmatter":125,"imagePaths":129},[118,119,120],{"depth":35,"slug":97,"text":100},{"depth":38,"slug":81,"text":82},{"depth":38,"slug":121,"text":122},"technical-highlights","Technical Highlights",[],[],{"title":100,"description":101,"technologies":126,"featured":22,"liveUrl":106,"githubUrl":107,"images":127,"publishDate":128},[103,65,104,105],[109],["Date","2024-02-01T00:00:00.000Z"],[],"portfolio-website.md","blog",["Map",133,134,179,180],"getting-started-with-astro",{"id":133,"data":135,"body":144,"filePath":145,"digest":146,"rendered":147,"legacyId":178},{"title":136,"description":137,"publishDate":138,"tags":139,"featured":22,"draft":143},"Getting Started with Astro: A Modern Static Site Generator","Learn how to build fast, content-focused websites with Astro's unique island architecture",["Date","2024-01-10T00:00:00.000Z"],[103,140,141,142],"Web Development","Static Sites","Performance",false,"# Getting Started with Astro: A Modern Static Site Generator\n\nAstro has been gaining significant traction in the web development community, and for good reason. It offers a unique approach to building websites that prioritizes performance and developer experience.\n\n## What Makes Astro Different?\n\nAstro's key innovation is its **island architecture**. Unlike traditional frameworks that hydrate the entire page, Astro only hydrates the interactive components that need JavaScript, leaving the rest as static HTML.\n\n### Key Benefits\n\n1. **Zero JavaScript by Default**: Astro ships zero JavaScript to the browser unless you explicitly need it\n2. **Framework Agnostic**: Use React, Vue, Svelte, or any other framework within the same project\n3. **Content Collections**: Built-in content management for blogs and documentation\n4. **Excellent Performance**: Lighthouse scores of 100 are common with Astro sites\n\n## Building Your First Astro Site\n\nLet's walk through creating a simple Astro project:\n\n```bash\n# Create a new Astro project\nnpm create astro@latest my-astro-site\n\n# Navigate to the project\ncd my-astro-site\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n```\n\n## Content Collections\n\nOne of Astro's standout features is content collections. They provide type-safe content management:\n\n```typescript\n// src/content/config.ts\nimport { defineCollection, z } from 'astro:content';\n\nconst blogCollection = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    publishDate: z.date(),\n    tags: z.array(z.string()).optional(),\n  }),\n});\n\nexport const collections = {\n  'blog': blogCollection,\n};\n```\n\n## Performance Out of the Box\n\nAstro's performance benefits come from several optimizations:\n\n- **Static HTML Generation**: Most content is pre-rendered at build time\n- **Selective Hydration**: Only interactive components load JavaScript\n- **Automatic Code Splitting**: JavaScript is automatically split by component\n- **Image Optimization**: Built-in image optimization and lazy loading\n\n## Conclusion\n\nAstro represents a paradigm shift in how we think about web development. By defaulting to static HTML and selectively adding interactivity, it delivers exceptional performance while maintaining developer productivity.\n\nWhether you're building a blog, documentation site, or marketing pages, Astro is worth considering for your next project.","src/content/blog/getting-started-with-astro.md","f2a3cfeac51ccf2d",{"html":148,"metadata":149},"\u003Ch1 id=\"getting-started-with-astro-a-modern-static-site-generator\">Getting Started with Astro: A Modern Static Site Generator\u003C/h1>\n\u003Cp>Astro has been gaining significant traction in the web development community, and for good reason. It offers a unique approach to building websites that prioritizes performance and developer experience.\u003C/p>\n\u003Ch2 id=\"what-makes-astro-different\">What Makes Astro Different?\u003C/h2>\n\u003Cp>Astro’s key innovation is its \u003Cstrong>island architecture\u003C/strong>. Unlike traditional frameworks that hydrate the entire page, Astro only hydrates the interactive components that need JavaScript, leaving the rest as static HTML.\u003C/p>\n\u003Ch3 id=\"key-benefits\">Key Benefits\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>Zero JavaScript by Default\u003C/strong>: Astro ships zero JavaScript to the browser unless you explicitly need it\u003C/li>\n\u003Cli>\u003Cstrong>Framework Agnostic\u003C/strong>: Use React, Vue, Svelte, or any other framework within the same project\u003C/li>\n\u003Cli>\u003Cstrong>Content Collections\u003C/strong>: Built-in content management for blogs and documentation\u003C/li>\n\u003Cli>\u003Cstrong>Excellent Performance\u003C/strong>: Lighthouse scores of 100 are common with Astro sites\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"building-your-first-astro-site\">Building Your First Astro Site\u003C/h2>\n\u003Cp>Let’s walk through creating a simple Astro project:\u003C/p>\n\u003Cpre class=\"language-bash\" data-language=\"bash\">\u003Ccode is:raw=\"\" class=\"language-bash\">\u003Cspan class=\"token comment\"># Create a new Astro project\u003C/span>\n\u003Cspan class=\"token function\">npm\u003C/span> create astro@latest my-astro-site\n\n\u003Cspan class=\"token comment\"># Navigate to the project\u003C/span>\n\u003Cspan class=\"token builtin class-name\">cd\u003C/span> my-astro-site\n\n\u003Cspan class=\"token comment\"># Install dependencies\u003C/span>\n\u003Cspan class=\"token function\">npm\u003C/span> \u003Cspan class=\"token function\">install\u003C/span>\n\n\u003Cspan class=\"token comment\"># Start the development server\u003C/span>\n\u003Cspan class=\"token function\">npm\u003C/span> run dev\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"content-collections\">Content Collections\u003C/h2>\n\u003Cp>One of Astro’s standout features is content collections. They provide type-safe content management:\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token comment\">// src/content/config.ts\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> defineCollection\u003Cspan class=\"token punctuation\">,\u003C/span> z \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'astro:content'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">const\u003C/span> blogCollection \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">defineCollection\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n  type\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'content'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  schema\u003Cspan class=\"token operator\">:\u003C/span> z\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">object\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n    title\u003Cspan class=\"token operator\">:\u003C/span> z\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">string\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    publishDate\u003Cspan class=\"token operator\">:\u003C/span> z\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">date\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    tags\u003Cspan class=\"token operator\">:\u003C/span> z\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">array\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>z\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">string\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">optional\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> collections \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token string-property property\">'blog'\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> blogCollection\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"performance-out-of-the-box\">Performance Out of the Box\u003C/h2>\n\u003Cp>Astro’s performance benefits come from several optimizations:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Static HTML Generation\u003C/strong>: Most content is pre-rendered at build time\u003C/li>\n\u003Cli>\u003Cstrong>Selective Hydration\u003C/strong>: Only interactive components load JavaScript\u003C/li>\n\u003Cli>\u003Cstrong>Automatic Code Splitting\u003C/strong>: JavaScript is automatically split by component\u003C/li>\n\u003Cli>\u003Cstrong>Image Optimization\u003C/strong>: Built-in image optimization and lazy loading\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Astro represents a paradigm shift in how we think about web development. By defaulting to static HTML and selectively adding interactivity, it delivers exceptional performance while maintaining developer productivity.\u003C/p>\n\u003Cp>Whether you’re building a blog, documentation site, or marketing pages, Astro is worth considering for your next project.\u003C/p>",{"headings":150,"localImagePaths":172,"remoteImagePaths":173,"frontmatter":174,"imagePaths":177},[151,153,156,160,163,166,169],{"depth":35,"slug":152,"text":136},"getting-started-with-astro-a-modern-static-site-generator",{"depth":38,"slug":154,"text":155},"what-makes-astro-different","What Makes Astro Different?",{"depth":157,"slug":158,"text":159},3,"key-benefits","Key Benefits",{"depth":38,"slug":161,"text":162},"building-your-first-astro-site","Building Your First Astro Site",{"depth":38,"slug":164,"text":165},"content-collections","Content Collections",{"depth":38,"slug":167,"text":168},"performance-out-of-the-box","Performance Out of the Box",{"depth":38,"slug":170,"text":171},"conclusion","Conclusion",[],[],{"title":136,"description":137,"publishDate":175,"tags":176,"featured":22,"draft":143},["Date","2024-01-10T00:00:00.000Z"],[103,140,141,142],[],"getting-started-with-astro.md","typescript-best-practices",{"id":179,"data":181,"body":189,"filePath":190,"digest":191,"rendered":192,"legacyId":223},{"title":182,"description":183,"publishDate":184,"tags":185,"featured":143,"draft":143},"TypeScript Best Practices for Modern Web Development","Essential TypeScript patterns and practices for building maintainable applications",["Date","2024-01-25T00:00:00.000Z"],[65,186,187,188],"JavaScript","Best Practices","Code Quality","# TypeScript Best Practices for Modern Web Development\n\nTypeScript has become the de facto standard for large-scale JavaScript applications. Here are some essential best practices to help you write better TypeScript code.\n\n## 1. Use Strict Mode\n\nAlways enable strict mode in your `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true\n  }\n}\n```\n\n## 2. Prefer Type Inference\n\nLet TypeScript infer types when possible:\n\n```typescript\n// Good - type is inferred\nconst users = ['Alice', 'Bob', 'Charlie'];\n\n// Unnecessary - type annotation is redundant\nconst users: string[] = ['Alice', 'Bob', 'Charlie'];\n```\n\n## 3. Use Union Types Effectively\n\nUnion types are powerful for modeling data that can be one of several types:\n\n```typescript\ntype Status = 'loading' | 'success' | 'error';\n\ninterface ApiResponse {\n  status: Status;\n  data?: any;\n  error?: string;\n}\n```\n\n## 4. Leverage Utility Types\n\nTypeScript provides many built-in utility types:\n\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  isActive: boolean;\n}\n\n// Create a type with only some properties\ntype UserPreview = Pick\u003CUser, 'id' | 'name'>;\n\n// Make all properties optional\ntype PartialUser = Partial\u003CUser>;\n\n// Make all properties required\ntype RequiredUser = Required\u003CUser>;\n```\n\n## 5. Use Discriminated Unions\n\nFor complex state management, discriminated unions are invaluable:\n\n```typescript\ntype LoadingState = {\n  status: 'loading';\n};\n\ntype SuccessState = {\n  status: 'success';\n  data: any;\n};\n\ntype ErrorState = {\n  status: 'error';\n  error: string;\n};\n\ntype AppState = LoadingState | SuccessState | ErrorState;\n\nfunction handleState(state: AppState) {\n  switch (state.status) {\n    case 'loading':\n      // TypeScript knows this is LoadingState\n      break;\n    case 'success':\n      // TypeScript knows this is SuccessState\n      console.log(state.data);\n      break;\n    case 'error':\n      // TypeScript knows this is ErrorState\n      console.error(state.error);\n      break;\n  }\n}\n```\n\n## 6. Generic Constraints\n\nUse generic constraints to make your functions more flexible yet type-safe:\n\n```typescript\ninterface Identifiable {\n  id: number;\n}\n\nfunction updateEntity\u003CT extends Identifiable>(\n  entity: T,\n  updates: Partial\u003CT>\n): T {\n  return { ...entity, ...updates };\n}\n```\n\n## Conclusion\n\nThese practices will help you write more maintainable and type-safe TypeScript code. Remember, the goal is to leverage TypeScript's type system to catch errors at compile time and improve developer experience.","src/content/blog/typescript-best-practices.md","ed944c6dcf11cca7",{"html":193,"metadata":194},"\u003Ch1 id=\"typescript-best-practices-for-modern-web-development\">TypeScript Best Practices for Modern Web Development\u003C/h1>\n\u003Cp>TypeScript has become the de facto standard for large-scale JavaScript applications. Here are some essential best practices to help you write better TypeScript code.\u003C/p>\n\u003Ch2 id=\"1-use-strict-mode\">1. Use Strict Mode\u003C/h2>\n\u003Cp>Always enable strict mode in your \u003Ccode>tsconfig.json\u003C/code>:\u003C/p>\n\u003Cpre class=\"language-json\" data-language=\"json\">\u003Ccode is:raw=\"\" class=\"language-json\">\u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token property\">\"compilerOptions\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token property\">\"strict\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"noImplicitAny\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"strictNullChecks\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"strictFunctionTypes\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"2-prefer-type-inference\">2. Prefer Type Inference\u003C/h2>\n\u003Cp>Let TypeScript infer types when possible:\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token comment\">// Good - type is inferred\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> users \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'Alice'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'Bob'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'Charlie'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token comment\">// Unnecessary - type annotation is redundant\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> users\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'Alice'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'Bob'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'Charlie'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"3-use-union-types-effectively\">3. Use Union Types Effectively\u003C/h2>\n\u003Cp>Union types are powerful for modeling data that can be one of several types:\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Status\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'loading'\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token string\">'success'\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token string\">'error'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">ApiResponse\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  status\u003Cspan class=\"token operator\">:\u003C/span> Status\u003Cspan class=\"token punctuation\">;\u003C/span>\n  data\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">any\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  error\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"4-leverage-utility-types\">4. Leverage Utility Types\u003C/h2>\n\u003Cp>TypeScript provides many built-in utility types:\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">User\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  id\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  email\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  isActive\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token comment\">// Create a type with only some properties\u003C/span>\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">UserPreview\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> Pick\u003Cspan class=\"token operator\">&#x3C;\u003C/span>User\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'id'\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token string\">'name'\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token comment\">// Make all properties optional\u003C/span>\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">PartialUser\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> Partial\u003Cspan class=\"token operator\">&#x3C;\u003C/span>User\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token comment\">// Make all properties required\u003C/span>\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">RequiredUser\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> Required\u003Cspan class=\"token operator\">&#x3C;\u003C/span>User\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"5-use-discriminated-unions\">5. Use Discriminated Unions\u003C/h2>\n\u003Cp>For complex state management, discriminated unions are invaluable:\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">LoadingState\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  status\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'loading'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">SuccessState\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  status\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'success'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  data\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">any\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">ErrorState\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  status\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'error'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  error\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">AppState\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> LoadingState \u003Cspan class=\"token operator\">|\u003C/span> SuccessState \u003Cspan class=\"token operator\">|\u003C/span> ErrorState\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">handleState\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>state\u003Cspan class=\"token operator\">:\u003C/span> AppState\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">switch\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>state\u003Cspan class=\"token punctuation\">.\u003C/span>status\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">case\u003C/span> \u003Cspan class=\"token string\">'loading'\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span>\n      \u003Cspan class=\"token comment\">// TypeScript knows this is LoadingState\u003C/span>\n      \u003Cspan class=\"token keyword\">break\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token keyword\">case\u003C/span> \u003Cspan class=\"token string\">'success'\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span>\n      \u003Cspan class=\"token comment\">// TypeScript knows this is SuccessState\u003C/span>\n      \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>state\u003Cspan class=\"token punctuation\">.\u003C/span>data\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n      \u003Cspan class=\"token keyword\">break\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token keyword\">case\u003C/span> \u003Cspan class=\"token string\">'error'\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span>\n      \u003Cspan class=\"token comment\">// TypeScript knows this is ErrorState\u003C/span>\n      \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">error\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>state\u003Cspan class=\"token punctuation\">.\u003C/span>error\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n      \u003Cspan class=\"token keyword\">break\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"6-generic-constraints\">6. Generic Constraints\u003C/h2>\n\u003Cp>Use generic constraints to make your functions more flexible yet type-safe:\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">Identifiable\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  id\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token generic-function\">\u003Cspan class=\"token function\">updateEntity\u003C/span>\u003Cspan class=\"token generic class-name\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token constant\">T\u003C/span> \u003Cspan class=\"token keyword\">extends\u003C/span> Identifiable\u003Cspan class=\"token operator\">>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n  entity\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  updates\u003Cspan class=\"token operator\">:\u003C/span> Partial\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\n\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">T\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token operator\">...\u003C/span>entity\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token operator\">...\u003C/span>updates \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>These practices will help you write more maintainable and type-safe TypeScript code. Remember, the goal is to leverage TypeScript’s type system to catch errors at compile time and improve developer experience.\u003C/p>",{"headings":195,"localImagePaths":217,"remoteImagePaths":218,"frontmatter":219,"imagePaths":222},[196,198,201,204,207,210,213,216],{"depth":35,"slug":197,"text":182},"typescript-best-practices-for-modern-web-development",{"depth":38,"slug":199,"text":200},"1-use-strict-mode","1. Use Strict Mode",{"depth":38,"slug":202,"text":203},"2-prefer-type-inference","2. Prefer Type Inference",{"depth":38,"slug":205,"text":206},"3-use-union-types-effectively","3. Use Union Types Effectively",{"depth":38,"slug":208,"text":209},"4-leverage-utility-types","4. Leverage Utility Types",{"depth":38,"slug":211,"text":212},"5-use-discriminated-unions","5. Use Discriminated Unions",{"depth":38,"slug":214,"text":215},"6-generic-constraints","6. Generic Constraints",{"depth":38,"slug":170,"text":171},[],[],{"title":182,"description":183,"publishDate":220,"tags":221,"featured":143,"draft":143},["Date","2024-01-25T00:00:00.000Z"],[65,186,187,188],[],"typescript-best-practices.md"]