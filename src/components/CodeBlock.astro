---
// CodeBlock component with Shiki syntax highlighting and copy functionality
import { Code } from 'astro:components';
import type { BundledLanguage, BundledTheme } from 'shiki';

export interface Props {
  code: string;
  lang?: BundledLanguage | string;
  title?: string;
  theme?: BundledTheme | string;
  wrap?: boolean;
  class?: string;
}

const {
  code,
  lang = "plaintext" as BundledLanguage,
  title,
  theme = "github-dark" as BundledTheme,
  wrap = false,
  class: className = "",
} = Astro.props;

// Generate unique ID for this code block
const codeBlockId = `code-${Math.random().toString(36).substring(2, 11)}`;
---

<div class={`code-block ${className}`} data-language={lang}>
  {
    title && (
      <div class="code-header">
        <div class="code-title">
          <span class="code-language">{lang}</span>
          <span class="code-filename">{title}</span>
        </div>
        <button
          class="copy-button"
          data-code-id={codeBlockId}
          aria-label="Copy code to clipboard"
          title="Copy code"
        >
          <svg
            class="copy-icon"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <rect width="14" height="14" x="8" y="8" rx="2" ry="2" />
            <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />
          </svg>
          <svg
            class="check-icon"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            style="display: none;"
          >
            <polyline points="20,6 9,17 4,12" />
          </svg>
          <span class="copy-text">Copy</span>
        </button>
      </div>
    )
  }

  <div class="code-container">
    {
      !title && (
        <button
          class="copy-button copy-button-overlay"
          data-code-id={codeBlockId}
          aria-label="Copy code to clipboard"
          title="Copy code"
        >
          <svg
            class="copy-icon"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <rect width="14" height="14" x="8" y="8" rx="2" ry="2" />
            <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />
          </svg>
          <svg
            class="check-icon"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            style="display: none;"
          >
            <polyline points="20,6 9,17 4,12" />
          </svg>
        </button>
      )
    }

    <Code 
      code={code.trim()} 
      lang={lang as BundledLanguage} 
      theme={theme as BundledTheme}
      wrap={wrap}
    />
  </div>

  <!-- Hidden textarea for copying -->
  <textarea
    id={codeBlockId}
    class="copy-textarea"
    readonly
    tabindex="-1"
    aria-hidden="true">{code.trim()}</textarea
  >
</div>

<style>
  .code-block {
    position: relative;
    margin: var(--space-6) 0;
    border-radius: var(--radius-xl);
    background-color: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    overflow: hidden;
  }

  .code-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-3) var(--space-4);
    background-color: var(--color-bg-tertiary);
    border-bottom: 1px solid var(--color-border);
  }

  .code-title {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    font-size: var(--text-sm);
  }

  .code-language {
    color: var(--color-accent);
    font-weight: var(--font-medium);
    text-transform: uppercase;
    font-size: var(--text-xs);
    letter-spacing: 0.05em;
  }

  .code-filename {
    color: var(--color-text-secondary);
    font-family: var(--font-mono);
  }

  .copy-button {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-2) var(--space-3);
    background-color: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-base);
    color: var(--color-text-secondary);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    cursor: pointer;
    transition: all var(--transition-fast);
  }

  .copy-button:hover {
    background-color: var(--color-bg-primary);
    color: var(--color-text-primary);
    border-color: var(--color-border-light);
  }

  .copy-button:focus-visible {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .copy-button-overlay {
    position: absolute;
    top: var(--space-3);
    right: var(--space-3);
    z-index: 10;
    opacity: 0;
    transition: opacity var(--transition-fast);
    padding: var(--space-2);
    min-width: auto;
  }

  .code-block:hover .copy-button-overlay {
    opacity: 1;
  }

  .copy-button.copied {
    background-color: var(--color-success, #10b981);
    color: white;
    border-color: var(--color-success, #10b981);
  }

  .copy-button.copied .copy-icon {
    display: none;
  }

  .copy-button.copied .check-icon {
    display: block !important;
  }

  .copy-button.copied .copy-text::after {
    content: "ied";
  }

  .code-container {
    position: relative;
    overflow-x: auto;
  }

  /* Override Shiki's default styles to match our design system */
  .code-container :global(.astro-code) {
    padding: var(--space-4) !important;
    margin: 0 !important;
    background: transparent !important;
    font-family: var(--font-mono) !important;
    font-size: var(--text-sm) !important;
    line-height: var(--leading-relaxed) !important;
    border-radius: 0 !important;
  }

  .code-container :global(.astro-code pre) {
    padding: 0 !important;
    margin: 0 !important;
    background: transparent !important;
    overflow-x: auto;
    white-space: pre;
  }

  .code-container :global(.astro-code code) {
    background: transparent !important;
    padding: 0 !important;
    border-radius: 0 !important;
    font-size: inherit !important;
    color: inherit !important;
  }

  .copy-textarea {
    position: absolute;
    left: -9999px;
    opacity: 0;
    pointer-events: none;
  }

  /* Responsive design */
  @media (max-width: 640px) {
    .code-header {
      padding: var(--space-2) var(--space-3);
    }

    .code-container :global(.astro-code) {
      padding: var(--space-3) !important;
      font-size: var(--text-xs) !important;
    }

    .copy-button-overlay {
      top: var(--space-2);
      right: var(--space-2);
    }

    .code-title {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-1);
    }
  }

  /* Ensure proper scrolling on mobile */
  @media (max-width: 480px) {
    .code-container {
      -webkit-overflow-scrolling: touch;
    }
  }
</style>

<script>
  // Copy functionality for code blocks
  document.addEventListener("DOMContentLoaded", function () {
    const copyButtons = document.querySelectorAll(".copy-button");

    copyButtons.forEach((button) => {
      button.addEventListener(
        "click",
        async function (this: HTMLButtonElement) {
          const codeId = this.getAttribute("data-code-id");
          if (!codeId) return;
          const textarea = document.getElementById(
            codeId,
          ) as HTMLTextAreaElement;

          if (!textarea) return;

          try {
            // Try using the modern clipboard API first
            if (navigator.clipboard && window.isSecureContext) {
              await navigator.clipboard.writeText(textarea.value);
            } else {
              // Fallback for older browsers
              textarea.select();
              textarea.setSelectionRange(0, 99999); // For mobile devices
              try {
                document.execCommand("copy");
              } catch (fallbackErr) {
                console.warn("Copy fallback failed:", fallbackErr);
              }
              textarea.blur();
            }

            // Show success state
            this.classList.add("copied");

            // Reset after 2 seconds
            const button = this;
            setTimeout(() => {
              button.classList.remove("copied");
            }, 2000);
          } catch (err) {
            console.error("Failed to copy code:", err);

            // Fallback: select the text for manual copying
            textarea.select();
            textarea.setSelectionRange(0, 99999);
          }
        },
      );
    });
  });
</script>